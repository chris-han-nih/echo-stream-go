// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/echo-stream/database/ent/predicate"
	"github.com/echo-stream/database/ent/slackmessage"
	"github.com/echo-stream/database/ent/slackmessageattachment"
	"github.com/google/uuid"
)

// SlackMessageUpdate is the builder for updating SlackMessage entities.
type SlackMessageUpdate struct {
	config
	hooks    []Hook
	mutation *SlackMessageMutation
}

// Where appends a list predicates to the SlackMessageUpdate builder.
func (smu *SlackMessageUpdate) Where(ps ...predicate.SlackMessage) *SlackMessageUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetApplicationId sets the "ApplicationId" field.
func (smu *SlackMessageUpdate) SetApplicationId(u uuid.UUID) *SlackMessageUpdate {
	smu.mutation.SetApplicationId(u)
	return smu
}

// SetNillableApplicationId sets the "ApplicationId" field if the given value is not nil.
func (smu *SlackMessageUpdate) SetNillableApplicationId(u *uuid.UUID) *SlackMessageUpdate {
	if u != nil {
		smu.SetApplicationId(*u)
	}
	return smu
}

// SetUserName sets the "UserName" field.
func (smu *SlackMessageUpdate) SetUserName(s string) *SlackMessageUpdate {
	smu.mutation.SetUserName(s)
	return smu
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (smu *SlackMessageUpdate) SetNillableUserName(s *string) *SlackMessageUpdate {
	if s != nil {
		smu.SetUserName(*s)
	}
	return smu
}

// ClearUserName clears the value of the "UserName" field.
func (smu *SlackMessageUpdate) ClearUserName() *SlackMessageUpdate {
	smu.mutation.ClearUserName()
	return smu
}

// SetIconEmoji sets the "IconEmoji" field.
func (smu *SlackMessageUpdate) SetIconEmoji(s string) *SlackMessageUpdate {
	smu.mutation.SetIconEmoji(s)
	return smu
}

// SetNillableIconEmoji sets the "IconEmoji" field if the given value is not nil.
func (smu *SlackMessageUpdate) SetNillableIconEmoji(s *string) *SlackMessageUpdate {
	if s != nil {
		smu.SetIconEmoji(*s)
	}
	return smu
}

// ClearIconEmoji clears the value of the "IconEmoji" field.
func (smu *SlackMessageUpdate) ClearIconEmoji() *SlackMessageUpdate {
	smu.mutation.ClearIconEmoji()
	return smu
}

// SetChannel sets the "Channel" field.
func (smu *SlackMessageUpdate) SetChannel(s string) *SlackMessageUpdate {
	smu.mutation.SetChannel(s)
	return smu
}

// SetNillableChannel sets the "Channel" field if the given value is not nil.
func (smu *SlackMessageUpdate) SetNillableChannel(s *string) *SlackMessageUpdate {
	if s != nil {
		smu.SetChannel(*s)
	}
	return smu
}

// SetText sets the "Text" field.
func (smu *SlackMessageUpdate) SetText(s string) *SlackMessageUpdate {
	smu.mutation.SetText(s)
	return smu
}

// SetNillableText sets the "Text" field if the given value is not nil.
func (smu *SlackMessageUpdate) SetNillableText(s *string) *SlackMessageUpdate {
	if s != nil {
		smu.SetText(*s)
	}
	return smu
}

// ClearText clears the value of the "Text" field.
func (smu *SlackMessageUpdate) ClearText() *SlackMessageUpdate {
	smu.mutation.ClearText()
	return smu
}

// SetThreadTs sets the "ThreadTs" field.
func (smu *SlackMessageUpdate) SetThreadTs(s string) *SlackMessageUpdate {
	smu.mutation.SetThreadTs(s)
	return smu
}

// SetNillableThreadTs sets the "ThreadTs" field if the given value is not nil.
func (smu *SlackMessageUpdate) SetNillableThreadTs(s *string) *SlackMessageUpdate {
	if s != nil {
		smu.SetThreadTs(*s)
	}
	return smu
}

// ClearThreadTs clears the value of the "ThreadTs" field.
func (smu *SlackMessageUpdate) ClearThreadTs() *SlackMessageUpdate {
	smu.mutation.ClearThreadTs()
	return smu
}

// SetState sets the "State" field.
func (smu *SlackMessageUpdate) SetState(s string) *SlackMessageUpdate {
	smu.mutation.SetState(s)
	return smu
}

// SetNillableState sets the "State" field if the given value is not nil.
func (smu *SlackMessageUpdate) SetNillableState(s *string) *SlackMessageUpdate {
	if s != nil {
		smu.SetState(*s)
	}
	return smu
}

// ClearState clears the value of the "State" field.
func (smu *SlackMessageUpdate) ClearState() *SlackMessageUpdate {
	smu.mutation.ClearState()
	return smu
}

// SetRetryCount sets the "RetryCount" field.
func (smu *SlackMessageUpdate) SetRetryCount(i int16) *SlackMessageUpdate {
	smu.mutation.ResetRetryCount()
	smu.mutation.SetRetryCount(i)
	return smu
}

// SetNillableRetryCount sets the "RetryCount" field if the given value is not nil.
func (smu *SlackMessageUpdate) SetNillableRetryCount(i *int16) *SlackMessageUpdate {
	if i != nil {
		smu.SetRetryCount(*i)
	}
	return smu
}

// AddRetryCount adds i to the "RetryCount" field.
func (smu *SlackMessageUpdate) AddRetryCount(i int16) *SlackMessageUpdate {
	smu.mutation.AddRetryCount(i)
	return smu
}

// ClearRetryCount clears the value of the "RetryCount" field.
func (smu *SlackMessageUpdate) ClearRetryCount() *SlackMessageUpdate {
	smu.mutation.ClearRetryCount()
	return smu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (smu *SlackMessageUpdate) SetUpdatedAt(t time.Time) *SlackMessageUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// AddSlackMessageAttachmentIDs adds the "slack_message_attachments" edge to the SlackMessageAttachment entity by IDs.
func (smu *SlackMessageUpdate) AddSlackMessageAttachmentIDs(ids ...int) *SlackMessageUpdate {
	smu.mutation.AddSlackMessageAttachmentIDs(ids...)
	return smu
}

// AddSlackMessageAttachments adds the "slack_message_attachments" edges to the SlackMessageAttachment entity.
func (smu *SlackMessageUpdate) AddSlackMessageAttachments(s ...*SlackMessageAttachment) *SlackMessageUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.AddSlackMessageAttachmentIDs(ids...)
}

// Mutation returns the SlackMessageMutation object of the builder.
func (smu *SlackMessageUpdate) Mutation() *SlackMessageMutation {
	return smu.mutation
}

// ClearSlackMessageAttachments clears all "slack_message_attachments" edges to the SlackMessageAttachment entity.
func (smu *SlackMessageUpdate) ClearSlackMessageAttachments() *SlackMessageUpdate {
	smu.mutation.ClearSlackMessageAttachments()
	return smu
}

// RemoveSlackMessageAttachmentIDs removes the "slack_message_attachments" edge to SlackMessageAttachment entities by IDs.
func (smu *SlackMessageUpdate) RemoveSlackMessageAttachmentIDs(ids ...int) *SlackMessageUpdate {
	smu.mutation.RemoveSlackMessageAttachmentIDs(ids...)
	return smu
}

// RemoveSlackMessageAttachments removes "slack_message_attachments" edges to SlackMessageAttachment entities.
func (smu *SlackMessageUpdate) RemoveSlackMessageAttachments(s ...*SlackMessageAttachment) *SlackMessageUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.RemoveSlackMessageAttachmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SlackMessageUpdate) Save(ctx context.Context) (int, error) {
	smu.defaults()
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SlackMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SlackMessageUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SlackMessageUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *SlackMessageUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok {
		v := slackmessage.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *SlackMessageUpdate) check() error {
	if v, ok := smu.mutation.Channel(); ok {
		if err := slackmessage.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "Channel", err: fmt.Errorf(`ent: validator failed for field "SlackMessage.Channel": %w`, err)}
		}
	}
	return nil
}

func (smu *SlackMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := smu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(slackmessage.Table, slackmessage.Columns, sqlgraph.NewFieldSpec(slackmessage.FieldID, field.TypeInt))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.ApplicationId(); ok {
		_spec.SetField(slackmessage.FieldApplicationId, field.TypeUUID, value)
	}
	if value, ok := smu.mutation.UserName(); ok {
		_spec.SetField(slackmessage.FieldUserName, field.TypeString, value)
	}
	if smu.mutation.UserNameCleared() {
		_spec.ClearField(slackmessage.FieldUserName, field.TypeString)
	}
	if value, ok := smu.mutation.IconEmoji(); ok {
		_spec.SetField(slackmessage.FieldIconEmoji, field.TypeString, value)
	}
	if smu.mutation.IconEmojiCleared() {
		_spec.ClearField(slackmessage.FieldIconEmoji, field.TypeString)
	}
	if value, ok := smu.mutation.Channel(); ok {
		_spec.SetField(slackmessage.FieldChannel, field.TypeString, value)
	}
	if value, ok := smu.mutation.Text(); ok {
		_spec.SetField(slackmessage.FieldText, field.TypeString, value)
	}
	if smu.mutation.TextCleared() {
		_spec.ClearField(slackmessage.FieldText, field.TypeString)
	}
	if value, ok := smu.mutation.ThreadTs(); ok {
		_spec.SetField(slackmessage.FieldThreadTs, field.TypeString, value)
	}
	if smu.mutation.ThreadTsCleared() {
		_spec.ClearField(slackmessage.FieldThreadTs, field.TypeString)
	}
	if value, ok := smu.mutation.State(); ok {
		_spec.SetField(slackmessage.FieldState, field.TypeString, value)
	}
	if smu.mutation.StateCleared() {
		_spec.ClearField(slackmessage.FieldState, field.TypeString)
	}
	if value, ok := smu.mutation.RetryCount(); ok {
		_spec.SetField(slackmessage.FieldRetryCount, field.TypeInt16, value)
	}
	if value, ok := smu.mutation.AddedRetryCount(); ok {
		_spec.AddField(slackmessage.FieldRetryCount, field.TypeInt16, value)
	}
	if smu.mutation.RetryCountCleared() {
		_spec.ClearField(slackmessage.FieldRetryCount, field.TypeInt16)
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(slackmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if smu.mutation.SlackMessageAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   slackmessage.SlackMessageAttachmentsTable,
			Columns: []string{slackmessage.SlackMessageAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slackmessageattachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedSlackMessageAttachmentsIDs(); len(nodes) > 0 && !smu.mutation.SlackMessageAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   slackmessage.SlackMessageAttachmentsTable,
			Columns: []string{slackmessage.SlackMessageAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slackmessageattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.SlackMessageAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   slackmessage.SlackMessageAttachmentsTable,
			Columns: []string{slackmessage.SlackMessageAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slackmessageattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slackmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// SlackMessageUpdateOne is the builder for updating a single SlackMessage entity.
type SlackMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SlackMessageMutation
}

// SetApplicationId sets the "ApplicationId" field.
func (smuo *SlackMessageUpdateOne) SetApplicationId(u uuid.UUID) *SlackMessageUpdateOne {
	smuo.mutation.SetApplicationId(u)
	return smuo
}

// SetNillableApplicationId sets the "ApplicationId" field if the given value is not nil.
func (smuo *SlackMessageUpdateOne) SetNillableApplicationId(u *uuid.UUID) *SlackMessageUpdateOne {
	if u != nil {
		smuo.SetApplicationId(*u)
	}
	return smuo
}

// SetUserName sets the "UserName" field.
func (smuo *SlackMessageUpdateOne) SetUserName(s string) *SlackMessageUpdateOne {
	smuo.mutation.SetUserName(s)
	return smuo
}

// SetNillableUserName sets the "UserName" field if the given value is not nil.
func (smuo *SlackMessageUpdateOne) SetNillableUserName(s *string) *SlackMessageUpdateOne {
	if s != nil {
		smuo.SetUserName(*s)
	}
	return smuo
}

// ClearUserName clears the value of the "UserName" field.
func (smuo *SlackMessageUpdateOne) ClearUserName() *SlackMessageUpdateOne {
	smuo.mutation.ClearUserName()
	return smuo
}

// SetIconEmoji sets the "IconEmoji" field.
func (smuo *SlackMessageUpdateOne) SetIconEmoji(s string) *SlackMessageUpdateOne {
	smuo.mutation.SetIconEmoji(s)
	return smuo
}

// SetNillableIconEmoji sets the "IconEmoji" field if the given value is not nil.
func (smuo *SlackMessageUpdateOne) SetNillableIconEmoji(s *string) *SlackMessageUpdateOne {
	if s != nil {
		smuo.SetIconEmoji(*s)
	}
	return smuo
}

// ClearIconEmoji clears the value of the "IconEmoji" field.
func (smuo *SlackMessageUpdateOne) ClearIconEmoji() *SlackMessageUpdateOne {
	smuo.mutation.ClearIconEmoji()
	return smuo
}

// SetChannel sets the "Channel" field.
func (smuo *SlackMessageUpdateOne) SetChannel(s string) *SlackMessageUpdateOne {
	smuo.mutation.SetChannel(s)
	return smuo
}

// SetNillableChannel sets the "Channel" field if the given value is not nil.
func (smuo *SlackMessageUpdateOne) SetNillableChannel(s *string) *SlackMessageUpdateOne {
	if s != nil {
		smuo.SetChannel(*s)
	}
	return smuo
}

// SetText sets the "Text" field.
func (smuo *SlackMessageUpdateOne) SetText(s string) *SlackMessageUpdateOne {
	smuo.mutation.SetText(s)
	return smuo
}

// SetNillableText sets the "Text" field if the given value is not nil.
func (smuo *SlackMessageUpdateOne) SetNillableText(s *string) *SlackMessageUpdateOne {
	if s != nil {
		smuo.SetText(*s)
	}
	return smuo
}

// ClearText clears the value of the "Text" field.
func (smuo *SlackMessageUpdateOne) ClearText() *SlackMessageUpdateOne {
	smuo.mutation.ClearText()
	return smuo
}

// SetThreadTs sets the "ThreadTs" field.
func (smuo *SlackMessageUpdateOne) SetThreadTs(s string) *SlackMessageUpdateOne {
	smuo.mutation.SetThreadTs(s)
	return smuo
}

// SetNillableThreadTs sets the "ThreadTs" field if the given value is not nil.
func (smuo *SlackMessageUpdateOne) SetNillableThreadTs(s *string) *SlackMessageUpdateOne {
	if s != nil {
		smuo.SetThreadTs(*s)
	}
	return smuo
}

// ClearThreadTs clears the value of the "ThreadTs" field.
func (smuo *SlackMessageUpdateOne) ClearThreadTs() *SlackMessageUpdateOne {
	smuo.mutation.ClearThreadTs()
	return smuo
}

// SetState sets the "State" field.
func (smuo *SlackMessageUpdateOne) SetState(s string) *SlackMessageUpdateOne {
	smuo.mutation.SetState(s)
	return smuo
}

// SetNillableState sets the "State" field if the given value is not nil.
func (smuo *SlackMessageUpdateOne) SetNillableState(s *string) *SlackMessageUpdateOne {
	if s != nil {
		smuo.SetState(*s)
	}
	return smuo
}

// ClearState clears the value of the "State" field.
func (smuo *SlackMessageUpdateOne) ClearState() *SlackMessageUpdateOne {
	smuo.mutation.ClearState()
	return smuo
}

// SetRetryCount sets the "RetryCount" field.
func (smuo *SlackMessageUpdateOne) SetRetryCount(i int16) *SlackMessageUpdateOne {
	smuo.mutation.ResetRetryCount()
	smuo.mutation.SetRetryCount(i)
	return smuo
}

// SetNillableRetryCount sets the "RetryCount" field if the given value is not nil.
func (smuo *SlackMessageUpdateOne) SetNillableRetryCount(i *int16) *SlackMessageUpdateOne {
	if i != nil {
		smuo.SetRetryCount(*i)
	}
	return smuo
}

// AddRetryCount adds i to the "RetryCount" field.
func (smuo *SlackMessageUpdateOne) AddRetryCount(i int16) *SlackMessageUpdateOne {
	smuo.mutation.AddRetryCount(i)
	return smuo
}

// ClearRetryCount clears the value of the "RetryCount" field.
func (smuo *SlackMessageUpdateOne) ClearRetryCount() *SlackMessageUpdateOne {
	smuo.mutation.ClearRetryCount()
	return smuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (smuo *SlackMessageUpdateOne) SetUpdatedAt(t time.Time) *SlackMessageUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// AddSlackMessageAttachmentIDs adds the "slack_message_attachments" edge to the SlackMessageAttachment entity by IDs.
func (smuo *SlackMessageUpdateOne) AddSlackMessageAttachmentIDs(ids ...int) *SlackMessageUpdateOne {
	smuo.mutation.AddSlackMessageAttachmentIDs(ids...)
	return smuo
}

// AddSlackMessageAttachments adds the "slack_message_attachments" edges to the SlackMessageAttachment entity.
func (smuo *SlackMessageUpdateOne) AddSlackMessageAttachments(s ...*SlackMessageAttachment) *SlackMessageUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.AddSlackMessageAttachmentIDs(ids...)
}

// Mutation returns the SlackMessageMutation object of the builder.
func (smuo *SlackMessageUpdateOne) Mutation() *SlackMessageMutation {
	return smuo.mutation
}

// ClearSlackMessageAttachments clears all "slack_message_attachments" edges to the SlackMessageAttachment entity.
func (smuo *SlackMessageUpdateOne) ClearSlackMessageAttachments() *SlackMessageUpdateOne {
	smuo.mutation.ClearSlackMessageAttachments()
	return smuo
}

// RemoveSlackMessageAttachmentIDs removes the "slack_message_attachments" edge to SlackMessageAttachment entities by IDs.
func (smuo *SlackMessageUpdateOne) RemoveSlackMessageAttachmentIDs(ids ...int) *SlackMessageUpdateOne {
	smuo.mutation.RemoveSlackMessageAttachmentIDs(ids...)
	return smuo
}

// RemoveSlackMessageAttachments removes "slack_message_attachments" edges to SlackMessageAttachment entities.
func (smuo *SlackMessageUpdateOne) RemoveSlackMessageAttachments(s ...*SlackMessageAttachment) *SlackMessageUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.RemoveSlackMessageAttachmentIDs(ids...)
}

// Where appends a list predicates to the SlackMessageUpdate builder.
func (smuo *SlackMessageUpdateOne) Where(ps ...predicate.SlackMessage) *SlackMessageUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SlackMessageUpdateOne) Select(field string, fields ...string) *SlackMessageUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SlackMessage entity.
func (smuo *SlackMessageUpdateOne) Save(ctx context.Context) (*SlackMessage, error) {
	smuo.defaults()
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SlackMessageUpdateOne) SaveX(ctx context.Context) *SlackMessage {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SlackMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SlackMessageUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *SlackMessageUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok {
		v := slackmessage.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *SlackMessageUpdateOne) check() error {
	if v, ok := smuo.mutation.Channel(); ok {
		if err := slackmessage.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "Channel", err: fmt.Errorf(`ent: validator failed for field "SlackMessage.Channel": %w`, err)}
		}
	}
	return nil
}

func (smuo *SlackMessageUpdateOne) sqlSave(ctx context.Context) (_node *SlackMessage, err error) {
	if err := smuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(slackmessage.Table, slackmessage.Columns, sqlgraph.NewFieldSpec(slackmessage.FieldID, field.TypeInt))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SlackMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, slackmessage.FieldID)
		for _, f := range fields {
			if !slackmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != slackmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.ApplicationId(); ok {
		_spec.SetField(slackmessage.FieldApplicationId, field.TypeUUID, value)
	}
	if value, ok := smuo.mutation.UserName(); ok {
		_spec.SetField(slackmessage.FieldUserName, field.TypeString, value)
	}
	if smuo.mutation.UserNameCleared() {
		_spec.ClearField(slackmessage.FieldUserName, field.TypeString)
	}
	if value, ok := smuo.mutation.IconEmoji(); ok {
		_spec.SetField(slackmessage.FieldIconEmoji, field.TypeString, value)
	}
	if smuo.mutation.IconEmojiCleared() {
		_spec.ClearField(slackmessage.FieldIconEmoji, field.TypeString)
	}
	if value, ok := smuo.mutation.Channel(); ok {
		_spec.SetField(slackmessage.FieldChannel, field.TypeString, value)
	}
	if value, ok := smuo.mutation.Text(); ok {
		_spec.SetField(slackmessage.FieldText, field.TypeString, value)
	}
	if smuo.mutation.TextCleared() {
		_spec.ClearField(slackmessage.FieldText, field.TypeString)
	}
	if value, ok := smuo.mutation.ThreadTs(); ok {
		_spec.SetField(slackmessage.FieldThreadTs, field.TypeString, value)
	}
	if smuo.mutation.ThreadTsCleared() {
		_spec.ClearField(slackmessage.FieldThreadTs, field.TypeString)
	}
	if value, ok := smuo.mutation.State(); ok {
		_spec.SetField(slackmessage.FieldState, field.TypeString, value)
	}
	if smuo.mutation.StateCleared() {
		_spec.ClearField(slackmessage.FieldState, field.TypeString)
	}
	if value, ok := smuo.mutation.RetryCount(); ok {
		_spec.SetField(slackmessage.FieldRetryCount, field.TypeInt16, value)
	}
	if value, ok := smuo.mutation.AddedRetryCount(); ok {
		_spec.AddField(slackmessage.FieldRetryCount, field.TypeInt16, value)
	}
	if smuo.mutation.RetryCountCleared() {
		_spec.ClearField(slackmessage.FieldRetryCount, field.TypeInt16)
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(slackmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if smuo.mutation.SlackMessageAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   slackmessage.SlackMessageAttachmentsTable,
			Columns: []string{slackmessage.SlackMessageAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slackmessageattachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedSlackMessageAttachmentsIDs(); len(nodes) > 0 && !smuo.mutation.SlackMessageAttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   slackmessage.SlackMessageAttachmentsTable,
			Columns: []string{slackmessage.SlackMessageAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slackmessageattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.SlackMessageAttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   slackmessage.SlackMessageAttachmentsTable,
			Columns: []string{slackmessage.SlackMessageAttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slackmessageattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SlackMessage{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slackmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
