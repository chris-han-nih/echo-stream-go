// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/echo-stream/database/ent/predicate"
	"github.com/echo-stream/database/ent/slackmessage"
	"github.com/echo-stream/database/ent/slackmessageattachment"
)

// SlackMessageAttachmentUpdate is the builder for updating SlackMessageAttachment entities.
type SlackMessageAttachmentUpdate struct {
	config
	hooks    []Hook
	mutation *SlackMessageAttachmentMutation
}

// Where appends a list predicates to the SlackMessageAttachmentUpdate builder.
func (smau *SlackMessageAttachmentUpdate) Where(ps ...predicate.SlackMessageAttachment) *SlackMessageAttachmentUpdate {
	smau.mutation.Where(ps...)
	return smau
}

// SetColor sets the "Color" field.
func (smau *SlackMessageAttachmentUpdate) SetColor(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetColor(s)
	return smau
}

// SetNillableColor sets the "Color" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableColor(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetColor(*s)
	}
	return smau
}

// ClearColor clears the value of the "Color" field.
func (smau *SlackMessageAttachmentUpdate) ClearColor() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearColor()
	return smau
}

// SetFallback sets the "Fallback" field.
func (smau *SlackMessageAttachmentUpdate) SetFallback(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetFallback(s)
	return smau
}

// SetNillableFallback sets the "Fallback" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableFallback(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetFallback(*s)
	}
	return smau
}

// ClearFallback clears the value of the "Fallback" field.
func (smau *SlackMessageAttachmentUpdate) ClearFallback() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearFallback()
	return smau
}

// SetCallbackID sets the "CallbackID" field.
func (smau *SlackMessageAttachmentUpdate) SetCallbackID(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetCallbackID(s)
	return smau
}

// SetNillableCallbackID sets the "CallbackID" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableCallbackID(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetCallbackID(*s)
	}
	return smau
}

// ClearCallbackID clears the value of the "CallbackID" field.
func (smau *SlackMessageAttachmentUpdate) ClearCallbackID() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearCallbackID()
	return smau
}

// SetAuthorID sets the "AuthorID" field.
func (smau *SlackMessageAttachmentUpdate) SetAuthorID(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetAuthorID(s)
	return smau
}

// SetNillableAuthorID sets the "AuthorID" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableAuthorID(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetAuthorID(*s)
	}
	return smau
}

// ClearAuthorID clears the value of the "AuthorID" field.
func (smau *SlackMessageAttachmentUpdate) ClearAuthorID() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearAuthorID()
	return smau
}

// SetAuthorName sets the "AuthorName" field.
func (smau *SlackMessageAttachmentUpdate) SetAuthorName(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetAuthorName(s)
	return smau
}

// SetNillableAuthorName sets the "AuthorName" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableAuthorName(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetAuthorName(*s)
	}
	return smau
}

// ClearAuthorName clears the value of the "AuthorName" field.
func (smau *SlackMessageAttachmentUpdate) ClearAuthorName() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearAuthorName()
	return smau
}

// SetAuthorSubname sets the "AuthorSubname" field.
func (smau *SlackMessageAttachmentUpdate) SetAuthorSubname(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetAuthorSubname(s)
	return smau
}

// SetNillableAuthorSubname sets the "AuthorSubname" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableAuthorSubname(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetAuthorSubname(*s)
	}
	return smau
}

// ClearAuthorSubname clears the value of the "AuthorSubname" field.
func (smau *SlackMessageAttachmentUpdate) ClearAuthorSubname() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearAuthorSubname()
	return smau
}

// SetAuthorLink sets the "AuthorLink" field.
func (smau *SlackMessageAttachmentUpdate) SetAuthorLink(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetAuthorLink(s)
	return smau
}

// SetNillableAuthorLink sets the "AuthorLink" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableAuthorLink(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetAuthorLink(*s)
	}
	return smau
}

// ClearAuthorLink clears the value of the "AuthorLink" field.
func (smau *SlackMessageAttachmentUpdate) ClearAuthorLink() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearAuthorLink()
	return smau
}

// SetAuthorIcon sets the "AuthorIcon" field.
func (smau *SlackMessageAttachmentUpdate) SetAuthorIcon(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetAuthorIcon(s)
	return smau
}

// SetNillableAuthorIcon sets the "AuthorIcon" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableAuthorIcon(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetAuthorIcon(*s)
	}
	return smau
}

// ClearAuthorIcon clears the value of the "AuthorIcon" field.
func (smau *SlackMessageAttachmentUpdate) ClearAuthorIcon() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearAuthorIcon()
	return smau
}

// SetTitle sets the "Title" field.
func (smau *SlackMessageAttachmentUpdate) SetTitle(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetTitle(s)
	return smau
}

// SetNillableTitle sets the "Title" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableTitle(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetTitle(*s)
	}
	return smau
}

// ClearTitle clears the value of the "Title" field.
func (smau *SlackMessageAttachmentUpdate) ClearTitle() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearTitle()
	return smau
}

// SetTitleLink sets the "TitleLink" field.
func (smau *SlackMessageAttachmentUpdate) SetTitleLink(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetTitleLink(s)
	return smau
}

// SetNillableTitleLink sets the "TitleLink" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableTitleLink(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetTitleLink(*s)
	}
	return smau
}

// ClearTitleLink clears the value of the "TitleLink" field.
func (smau *SlackMessageAttachmentUpdate) ClearTitleLink() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearTitleLink()
	return smau
}

// SetPretext sets the "Pretext" field.
func (smau *SlackMessageAttachmentUpdate) SetPretext(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetPretext(s)
	return smau
}

// SetNillablePretext sets the "Pretext" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillablePretext(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetPretext(*s)
	}
	return smau
}

// ClearPretext clears the value of the "Pretext" field.
func (smau *SlackMessageAttachmentUpdate) ClearPretext() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearPretext()
	return smau
}

// SetText sets the "Text" field.
func (smau *SlackMessageAttachmentUpdate) SetText(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetText(s)
	return smau
}

// SetNillableText sets the "Text" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableText(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetText(*s)
	}
	return smau
}

// ClearText clears the value of the "Text" field.
func (smau *SlackMessageAttachmentUpdate) ClearText() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearText()
	return smau
}

// SetImageURL sets the "ImageURL" field.
func (smau *SlackMessageAttachmentUpdate) SetImageURL(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetImageURL(s)
	return smau
}

// SetNillableImageURL sets the "ImageURL" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableImageURL(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetImageURL(*s)
	}
	return smau
}

// ClearImageURL clears the value of the "ImageURL" field.
func (smau *SlackMessageAttachmentUpdate) ClearImageURL() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearImageURL()
	return smau
}

// SetThumbURL sets the "ThumbURL" field.
func (smau *SlackMessageAttachmentUpdate) SetThumbURL(s string) *SlackMessageAttachmentUpdate {
	smau.mutation.SetThumbURL(s)
	return smau
}

// SetNillableThumbURL sets the "ThumbURL" field if the given value is not nil.
func (smau *SlackMessageAttachmentUpdate) SetNillableThumbURL(s *string) *SlackMessageAttachmentUpdate {
	if s != nil {
		smau.SetThumbURL(*s)
	}
	return smau
}

// ClearThumbURL clears the value of the "ThumbURL" field.
func (smau *SlackMessageAttachmentUpdate) ClearThumbURL() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearThumbURL()
	return smau
}

// SetMessageIDID sets the "message_id" edge to the SlackMessage entity by ID.
func (smau *SlackMessageAttachmentUpdate) SetMessageIDID(id int) *SlackMessageAttachmentUpdate {
	smau.mutation.SetMessageIDID(id)
	return smau
}

// SetMessageID sets the "message_id" edge to the SlackMessage entity.
func (smau *SlackMessageAttachmentUpdate) SetMessageID(s *SlackMessage) *SlackMessageAttachmentUpdate {
	return smau.SetMessageIDID(s.ID)
}

// Mutation returns the SlackMessageAttachmentMutation object of the builder.
func (smau *SlackMessageAttachmentUpdate) Mutation() *SlackMessageAttachmentMutation {
	return smau.mutation
}

// ClearMessageID clears the "message_id" edge to the SlackMessage entity.
func (smau *SlackMessageAttachmentUpdate) ClearMessageID() *SlackMessageAttachmentUpdate {
	smau.mutation.ClearMessageID()
	return smau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smau *SlackMessageAttachmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, smau.sqlSave, smau.mutation, smau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smau *SlackMessageAttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := smau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smau *SlackMessageAttachmentUpdate) Exec(ctx context.Context) error {
	_, err := smau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smau *SlackMessageAttachmentUpdate) ExecX(ctx context.Context) {
	if err := smau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smau *SlackMessageAttachmentUpdate) check() error {
	if _, ok := smau.mutation.MessageIDID(); smau.mutation.MessageIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SlackMessageAttachment.message_id"`)
	}
	return nil
}

func (smau *SlackMessageAttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := smau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(slackmessageattachment.Table, slackmessageattachment.Columns, sqlgraph.NewFieldSpec(slackmessageattachment.FieldID, field.TypeInt))
	if ps := smau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smau.mutation.Color(); ok {
		_spec.SetField(slackmessageattachment.FieldColor, field.TypeString, value)
	}
	if smau.mutation.ColorCleared() {
		_spec.ClearField(slackmessageattachment.FieldColor, field.TypeString)
	}
	if value, ok := smau.mutation.Fallback(); ok {
		_spec.SetField(slackmessageattachment.FieldFallback, field.TypeString, value)
	}
	if smau.mutation.FallbackCleared() {
		_spec.ClearField(slackmessageattachment.FieldFallback, field.TypeString)
	}
	if value, ok := smau.mutation.CallbackID(); ok {
		_spec.SetField(slackmessageattachment.FieldCallbackID, field.TypeString, value)
	}
	if smau.mutation.CallbackIDCleared() {
		_spec.ClearField(slackmessageattachment.FieldCallbackID, field.TypeString)
	}
	if value, ok := smau.mutation.AuthorID(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorID, field.TypeString, value)
	}
	if smau.mutation.AuthorIDCleared() {
		_spec.ClearField(slackmessageattachment.FieldAuthorID, field.TypeString)
	}
	if value, ok := smau.mutation.AuthorName(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorName, field.TypeString, value)
	}
	if smau.mutation.AuthorNameCleared() {
		_spec.ClearField(slackmessageattachment.FieldAuthorName, field.TypeString)
	}
	if value, ok := smau.mutation.AuthorSubname(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorSubname, field.TypeString, value)
	}
	if smau.mutation.AuthorSubnameCleared() {
		_spec.ClearField(slackmessageattachment.FieldAuthorSubname, field.TypeString)
	}
	if value, ok := smau.mutation.AuthorLink(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorLink, field.TypeString, value)
	}
	if smau.mutation.AuthorLinkCleared() {
		_spec.ClearField(slackmessageattachment.FieldAuthorLink, field.TypeString)
	}
	if value, ok := smau.mutation.AuthorIcon(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorIcon, field.TypeString, value)
	}
	if smau.mutation.AuthorIconCleared() {
		_spec.ClearField(slackmessageattachment.FieldAuthorIcon, field.TypeString)
	}
	if value, ok := smau.mutation.Title(); ok {
		_spec.SetField(slackmessageattachment.FieldTitle, field.TypeString, value)
	}
	if smau.mutation.TitleCleared() {
		_spec.ClearField(slackmessageattachment.FieldTitle, field.TypeString)
	}
	if value, ok := smau.mutation.TitleLink(); ok {
		_spec.SetField(slackmessageattachment.FieldTitleLink, field.TypeString, value)
	}
	if smau.mutation.TitleLinkCleared() {
		_spec.ClearField(slackmessageattachment.FieldTitleLink, field.TypeString)
	}
	if value, ok := smau.mutation.Pretext(); ok {
		_spec.SetField(slackmessageattachment.FieldPretext, field.TypeString, value)
	}
	if smau.mutation.PretextCleared() {
		_spec.ClearField(slackmessageattachment.FieldPretext, field.TypeString)
	}
	if value, ok := smau.mutation.Text(); ok {
		_spec.SetField(slackmessageattachment.FieldText, field.TypeString, value)
	}
	if smau.mutation.TextCleared() {
		_spec.ClearField(slackmessageattachment.FieldText, field.TypeString)
	}
	if value, ok := smau.mutation.ImageURL(); ok {
		_spec.SetField(slackmessageattachment.FieldImageURL, field.TypeString, value)
	}
	if smau.mutation.ImageURLCleared() {
		_spec.ClearField(slackmessageattachment.FieldImageURL, field.TypeString)
	}
	if value, ok := smau.mutation.ThumbURL(); ok {
		_spec.SetField(slackmessageattachment.FieldThumbURL, field.TypeString, value)
	}
	if smau.mutation.ThumbURLCleared() {
		_spec.ClearField(slackmessageattachment.FieldThumbURL, field.TypeString)
	}
	if smau.mutation.MessageIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   slackmessageattachment.MessageIDTable,
			Columns: []string{slackmessageattachment.MessageIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slackmessage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smau.mutation.MessageIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   slackmessageattachment.MessageIDTable,
			Columns: []string{slackmessageattachment.MessageIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slackmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slackmessageattachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smau.mutation.done = true
	return n, nil
}

// SlackMessageAttachmentUpdateOne is the builder for updating a single SlackMessageAttachment entity.
type SlackMessageAttachmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SlackMessageAttachmentMutation
}

// SetColor sets the "Color" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetColor(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetColor(s)
	return smauo
}

// SetNillableColor sets the "Color" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableColor(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetColor(*s)
	}
	return smauo
}

// ClearColor clears the value of the "Color" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearColor() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearColor()
	return smauo
}

// SetFallback sets the "Fallback" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetFallback(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetFallback(s)
	return smauo
}

// SetNillableFallback sets the "Fallback" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableFallback(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetFallback(*s)
	}
	return smauo
}

// ClearFallback clears the value of the "Fallback" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearFallback() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearFallback()
	return smauo
}

// SetCallbackID sets the "CallbackID" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetCallbackID(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetCallbackID(s)
	return smauo
}

// SetNillableCallbackID sets the "CallbackID" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableCallbackID(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetCallbackID(*s)
	}
	return smauo
}

// ClearCallbackID clears the value of the "CallbackID" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearCallbackID() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearCallbackID()
	return smauo
}

// SetAuthorID sets the "AuthorID" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetAuthorID(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetAuthorID(s)
	return smauo
}

// SetNillableAuthorID sets the "AuthorID" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableAuthorID(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetAuthorID(*s)
	}
	return smauo
}

// ClearAuthorID clears the value of the "AuthorID" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearAuthorID() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearAuthorID()
	return smauo
}

// SetAuthorName sets the "AuthorName" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetAuthorName(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetAuthorName(s)
	return smauo
}

// SetNillableAuthorName sets the "AuthorName" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableAuthorName(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetAuthorName(*s)
	}
	return smauo
}

// ClearAuthorName clears the value of the "AuthorName" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearAuthorName() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearAuthorName()
	return smauo
}

// SetAuthorSubname sets the "AuthorSubname" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetAuthorSubname(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetAuthorSubname(s)
	return smauo
}

// SetNillableAuthorSubname sets the "AuthorSubname" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableAuthorSubname(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetAuthorSubname(*s)
	}
	return smauo
}

// ClearAuthorSubname clears the value of the "AuthorSubname" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearAuthorSubname() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearAuthorSubname()
	return smauo
}

// SetAuthorLink sets the "AuthorLink" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetAuthorLink(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetAuthorLink(s)
	return smauo
}

// SetNillableAuthorLink sets the "AuthorLink" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableAuthorLink(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetAuthorLink(*s)
	}
	return smauo
}

// ClearAuthorLink clears the value of the "AuthorLink" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearAuthorLink() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearAuthorLink()
	return smauo
}

// SetAuthorIcon sets the "AuthorIcon" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetAuthorIcon(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetAuthorIcon(s)
	return smauo
}

// SetNillableAuthorIcon sets the "AuthorIcon" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableAuthorIcon(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetAuthorIcon(*s)
	}
	return smauo
}

// ClearAuthorIcon clears the value of the "AuthorIcon" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearAuthorIcon() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearAuthorIcon()
	return smauo
}

// SetTitle sets the "Title" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetTitle(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetTitle(s)
	return smauo
}

// SetNillableTitle sets the "Title" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableTitle(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetTitle(*s)
	}
	return smauo
}

// ClearTitle clears the value of the "Title" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearTitle() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearTitle()
	return smauo
}

// SetTitleLink sets the "TitleLink" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetTitleLink(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetTitleLink(s)
	return smauo
}

// SetNillableTitleLink sets the "TitleLink" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableTitleLink(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetTitleLink(*s)
	}
	return smauo
}

// ClearTitleLink clears the value of the "TitleLink" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearTitleLink() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearTitleLink()
	return smauo
}

// SetPretext sets the "Pretext" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetPretext(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetPretext(s)
	return smauo
}

// SetNillablePretext sets the "Pretext" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillablePretext(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetPretext(*s)
	}
	return smauo
}

// ClearPretext clears the value of the "Pretext" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearPretext() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearPretext()
	return smauo
}

// SetText sets the "Text" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetText(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetText(s)
	return smauo
}

// SetNillableText sets the "Text" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableText(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetText(*s)
	}
	return smauo
}

// ClearText clears the value of the "Text" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearText() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearText()
	return smauo
}

// SetImageURL sets the "ImageURL" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetImageURL(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetImageURL(s)
	return smauo
}

// SetNillableImageURL sets the "ImageURL" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableImageURL(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetImageURL(*s)
	}
	return smauo
}

// ClearImageURL clears the value of the "ImageURL" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearImageURL() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearImageURL()
	return smauo
}

// SetThumbURL sets the "ThumbURL" field.
func (smauo *SlackMessageAttachmentUpdateOne) SetThumbURL(s string) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetThumbURL(s)
	return smauo
}

// SetNillableThumbURL sets the "ThumbURL" field if the given value is not nil.
func (smauo *SlackMessageAttachmentUpdateOne) SetNillableThumbURL(s *string) *SlackMessageAttachmentUpdateOne {
	if s != nil {
		smauo.SetThumbURL(*s)
	}
	return smauo
}

// ClearThumbURL clears the value of the "ThumbURL" field.
func (smauo *SlackMessageAttachmentUpdateOne) ClearThumbURL() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearThumbURL()
	return smauo
}

// SetMessageIDID sets the "message_id" edge to the SlackMessage entity by ID.
func (smauo *SlackMessageAttachmentUpdateOne) SetMessageIDID(id int) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.SetMessageIDID(id)
	return smauo
}

// SetMessageID sets the "message_id" edge to the SlackMessage entity.
func (smauo *SlackMessageAttachmentUpdateOne) SetMessageID(s *SlackMessage) *SlackMessageAttachmentUpdateOne {
	return smauo.SetMessageIDID(s.ID)
}

// Mutation returns the SlackMessageAttachmentMutation object of the builder.
func (smauo *SlackMessageAttachmentUpdateOne) Mutation() *SlackMessageAttachmentMutation {
	return smauo.mutation
}

// ClearMessageID clears the "message_id" edge to the SlackMessage entity.
func (smauo *SlackMessageAttachmentUpdateOne) ClearMessageID() *SlackMessageAttachmentUpdateOne {
	smauo.mutation.ClearMessageID()
	return smauo
}

// Where appends a list predicates to the SlackMessageAttachmentUpdate builder.
func (smauo *SlackMessageAttachmentUpdateOne) Where(ps ...predicate.SlackMessageAttachment) *SlackMessageAttachmentUpdateOne {
	smauo.mutation.Where(ps...)
	return smauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smauo *SlackMessageAttachmentUpdateOne) Select(field string, fields ...string) *SlackMessageAttachmentUpdateOne {
	smauo.fields = append([]string{field}, fields...)
	return smauo
}

// Save executes the query and returns the updated SlackMessageAttachment entity.
func (smauo *SlackMessageAttachmentUpdateOne) Save(ctx context.Context) (*SlackMessageAttachment, error) {
	return withHooks(ctx, smauo.sqlSave, smauo.mutation, smauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smauo *SlackMessageAttachmentUpdateOne) SaveX(ctx context.Context) *SlackMessageAttachment {
	node, err := smauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smauo *SlackMessageAttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := smauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smauo *SlackMessageAttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := smauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smauo *SlackMessageAttachmentUpdateOne) check() error {
	if _, ok := smauo.mutation.MessageIDID(); smauo.mutation.MessageIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SlackMessageAttachment.message_id"`)
	}
	return nil
}

func (smauo *SlackMessageAttachmentUpdateOne) sqlSave(ctx context.Context) (_node *SlackMessageAttachment, err error) {
	if err := smauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(slackmessageattachment.Table, slackmessageattachment.Columns, sqlgraph.NewFieldSpec(slackmessageattachment.FieldID, field.TypeInt))
	id, ok := smauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SlackMessageAttachment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, slackmessageattachment.FieldID)
		for _, f := range fields {
			if !slackmessageattachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != slackmessageattachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smauo.mutation.Color(); ok {
		_spec.SetField(slackmessageattachment.FieldColor, field.TypeString, value)
	}
	if smauo.mutation.ColorCleared() {
		_spec.ClearField(slackmessageattachment.FieldColor, field.TypeString)
	}
	if value, ok := smauo.mutation.Fallback(); ok {
		_spec.SetField(slackmessageattachment.FieldFallback, field.TypeString, value)
	}
	if smauo.mutation.FallbackCleared() {
		_spec.ClearField(slackmessageattachment.FieldFallback, field.TypeString)
	}
	if value, ok := smauo.mutation.CallbackID(); ok {
		_spec.SetField(slackmessageattachment.FieldCallbackID, field.TypeString, value)
	}
	if smauo.mutation.CallbackIDCleared() {
		_spec.ClearField(slackmessageattachment.FieldCallbackID, field.TypeString)
	}
	if value, ok := smauo.mutation.AuthorID(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorID, field.TypeString, value)
	}
	if smauo.mutation.AuthorIDCleared() {
		_spec.ClearField(slackmessageattachment.FieldAuthorID, field.TypeString)
	}
	if value, ok := smauo.mutation.AuthorName(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorName, field.TypeString, value)
	}
	if smauo.mutation.AuthorNameCleared() {
		_spec.ClearField(slackmessageattachment.FieldAuthorName, field.TypeString)
	}
	if value, ok := smauo.mutation.AuthorSubname(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorSubname, field.TypeString, value)
	}
	if smauo.mutation.AuthorSubnameCleared() {
		_spec.ClearField(slackmessageattachment.FieldAuthorSubname, field.TypeString)
	}
	if value, ok := smauo.mutation.AuthorLink(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorLink, field.TypeString, value)
	}
	if smauo.mutation.AuthorLinkCleared() {
		_spec.ClearField(slackmessageattachment.FieldAuthorLink, field.TypeString)
	}
	if value, ok := smauo.mutation.AuthorIcon(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorIcon, field.TypeString, value)
	}
	if smauo.mutation.AuthorIconCleared() {
		_spec.ClearField(slackmessageattachment.FieldAuthorIcon, field.TypeString)
	}
	if value, ok := smauo.mutation.Title(); ok {
		_spec.SetField(slackmessageattachment.FieldTitle, field.TypeString, value)
	}
	if smauo.mutation.TitleCleared() {
		_spec.ClearField(slackmessageattachment.FieldTitle, field.TypeString)
	}
	if value, ok := smauo.mutation.TitleLink(); ok {
		_spec.SetField(slackmessageattachment.FieldTitleLink, field.TypeString, value)
	}
	if smauo.mutation.TitleLinkCleared() {
		_spec.ClearField(slackmessageattachment.FieldTitleLink, field.TypeString)
	}
	if value, ok := smauo.mutation.Pretext(); ok {
		_spec.SetField(slackmessageattachment.FieldPretext, field.TypeString, value)
	}
	if smauo.mutation.PretextCleared() {
		_spec.ClearField(slackmessageattachment.FieldPretext, field.TypeString)
	}
	if value, ok := smauo.mutation.Text(); ok {
		_spec.SetField(slackmessageattachment.FieldText, field.TypeString, value)
	}
	if smauo.mutation.TextCleared() {
		_spec.ClearField(slackmessageattachment.FieldText, field.TypeString)
	}
	if value, ok := smauo.mutation.ImageURL(); ok {
		_spec.SetField(slackmessageattachment.FieldImageURL, field.TypeString, value)
	}
	if smauo.mutation.ImageURLCleared() {
		_spec.ClearField(slackmessageattachment.FieldImageURL, field.TypeString)
	}
	if value, ok := smauo.mutation.ThumbURL(); ok {
		_spec.SetField(slackmessageattachment.FieldThumbURL, field.TypeString, value)
	}
	if smauo.mutation.ThumbURLCleared() {
		_spec.ClearField(slackmessageattachment.FieldThumbURL, field.TypeString)
	}
	if smauo.mutation.MessageIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   slackmessageattachment.MessageIDTable,
			Columns: []string{slackmessageattachment.MessageIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slackmessage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smauo.mutation.MessageIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   slackmessageattachment.MessageIDTable,
			Columns: []string{slackmessageattachment.MessageIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slackmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SlackMessageAttachment{config: smauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{slackmessageattachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smauo.mutation.done = true
	return _node, nil
}
