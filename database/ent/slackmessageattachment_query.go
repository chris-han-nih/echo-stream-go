// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/echo-stream/database/ent/predicate"
	"github.com/echo-stream/database/ent/slackmessage"
	"github.com/echo-stream/database/ent/slackmessageattachment"
)

// SlackMessageAttachmentQuery is the builder for querying SlackMessageAttachment entities.
type SlackMessageAttachmentQuery struct {
	config
	ctx           *QueryContext
	order         []slackmessageattachment.OrderOption
	inters        []Interceptor
	predicates    []predicate.SlackMessageAttachment
	withMessageID *SlackMessageQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SlackMessageAttachmentQuery builder.
func (smaq *SlackMessageAttachmentQuery) Where(ps ...predicate.SlackMessageAttachment) *SlackMessageAttachmentQuery {
	smaq.predicates = append(smaq.predicates, ps...)
	return smaq
}

// Limit the number of records to be returned by this query.
func (smaq *SlackMessageAttachmentQuery) Limit(limit int) *SlackMessageAttachmentQuery {
	smaq.ctx.Limit = &limit
	return smaq
}

// Offset to start from.
func (smaq *SlackMessageAttachmentQuery) Offset(offset int) *SlackMessageAttachmentQuery {
	smaq.ctx.Offset = &offset
	return smaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (smaq *SlackMessageAttachmentQuery) Unique(unique bool) *SlackMessageAttachmentQuery {
	smaq.ctx.Unique = &unique
	return smaq
}

// Order specifies how the records should be ordered.
func (smaq *SlackMessageAttachmentQuery) Order(o ...slackmessageattachment.OrderOption) *SlackMessageAttachmentQuery {
	smaq.order = append(smaq.order, o...)
	return smaq
}

// QueryMessageID chains the current query on the "message_id" edge.
func (smaq *SlackMessageAttachmentQuery) QueryMessageID() *SlackMessageQuery {
	query := (&SlackMessageClient{config: smaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := smaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := smaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(slackmessageattachment.Table, slackmessageattachment.FieldID, selector),
			sqlgraph.To(slackmessage.Table, slackmessage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, slackmessageattachment.MessageIDTable, slackmessageattachment.MessageIDColumn),
		)
		fromU = sqlgraph.SetNeighbors(smaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SlackMessageAttachment entity from the query.
// Returns a *NotFoundError when no SlackMessageAttachment was found.
func (smaq *SlackMessageAttachmentQuery) First(ctx context.Context) (*SlackMessageAttachment, error) {
	nodes, err := smaq.Limit(1).All(setContextOp(ctx, smaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{slackmessageattachment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (smaq *SlackMessageAttachmentQuery) FirstX(ctx context.Context) *SlackMessageAttachment {
	node, err := smaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SlackMessageAttachment ID from the query.
// Returns a *NotFoundError when no SlackMessageAttachment ID was found.
func (smaq *SlackMessageAttachmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = smaq.Limit(1).IDs(setContextOp(ctx, smaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{slackmessageattachment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (smaq *SlackMessageAttachmentQuery) FirstIDX(ctx context.Context) int {
	id, err := smaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SlackMessageAttachment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SlackMessageAttachment entity is found.
// Returns a *NotFoundError when no SlackMessageAttachment entities are found.
func (smaq *SlackMessageAttachmentQuery) Only(ctx context.Context) (*SlackMessageAttachment, error) {
	nodes, err := smaq.Limit(2).All(setContextOp(ctx, smaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{slackmessageattachment.Label}
	default:
		return nil, &NotSingularError{slackmessageattachment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (smaq *SlackMessageAttachmentQuery) OnlyX(ctx context.Context) *SlackMessageAttachment {
	node, err := smaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SlackMessageAttachment ID in the query.
// Returns a *NotSingularError when more than one SlackMessageAttachment ID is found.
// Returns a *NotFoundError when no entities are found.
func (smaq *SlackMessageAttachmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = smaq.Limit(2).IDs(setContextOp(ctx, smaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{slackmessageattachment.Label}
	default:
		err = &NotSingularError{slackmessageattachment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (smaq *SlackMessageAttachmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := smaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SlackMessageAttachments.
func (smaq *SlackMessageAttachmentQuery) All(ctx context.Context) ([]*SlackMessageAttachment, error) {
	ctx = setContextOp(ctx, smaq.ctx, "All")
	if err := smaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SlackMessageAttachment, *SlackMessageAttachmentQuery]()
	return withInterceptors[[]*SlackMessageAttachment](ctx, smaq, qr, smaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (smaq *SlackMessageAttachmentQuery) AllX(ctx context.Context) []*SlackMessageAttachment {
	nodes, err := smaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SlackMessageAttachment IDs.
func (smaq *SlackMessageAttachmentQuery) IDs(ctx context.Context) (ids []int, err error) {
	if smaq.ctx.Unique == nil && smaq.path != nil {
		smaq.Unique(true)
	}
	ctx = setContextOp(ctx, smaq.ctx, "IDs")
	if err = smaq.Select(slackmessageattachment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (smaq *SlackMessageAttachmentQuery) IDsX(ctx context.Context) []int {
	ids, err := smaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (smaq *SlackMessageAttachmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, smaq.ctx, "Count")
	if err := smaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, smaq, querierCount[*SlackMessageAttachmentQuery](), smaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (smaq *SlackMessageAttachmentQuery) CountX(ctx context.Context) int {
	count, err := smaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (smaq *SlackMessageAttachmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, smaq.ctx, "Exist")
	switch _, err := smaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (smaq *SlackMessageAttachmentQuery) ExistX(ctx context.Context) bool {
	exist, err := smaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SlackMessageAttachmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (smaq *SlackMessageAttachmentQuery) Clone() *SlackMessageAttachmentQuery {
	if smaq == nil {
		return nil
	}
	return &SlackMessageAttachmentQuery{
		config:        smaq.config,
		ctx:           smaq.ctx.Clone(),
		order:         append([]slackmessageattachment.OrderOption{}, smaq.order...),
		inters:        append([]Interceptor{}, smaq.inters...),
		predicates:    append([]predicate.SlackMessageAttachment{}, smaq.predicates...),
		withMessageID: smaq.withMessageID.Clone(),
		// clone intermediate query.
		sql:  smaq.sql.Clone(),
		path: smaq.path,
	}
}

// WithMessageID tells the query-builder to eager-load the nodes that are connected to
// the "message_id" edge. The optional arguments are used to configure the query builder of the edge.
func (smaq *SlackMessageAttachmentQuery) WithMessageID(opts ...func(*SlackMessageQuery)) *SlackMessageAttachmentQuery {
	query := (&SlackMessageClient{config: smaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	smaq.withMessageID = query
	return smaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Color string `json:"Color,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SlackMessageAttachment.Query().
//		GroupBy(slackmessageattachment.FieldColor).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (smaq *SlackMessageAttachmentQuery) GroupBy(field string, fields ...string) *SlackMessageAttachmentGroupBy {
	smaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SlackMessageAttachmentGroupBy{build: smaq}
	grbuild.flds = &smaq.ctx.Fields
	grbuild.label = slackmessageattachment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Color string `json:"Color,omitempty"`
//	}
//
//	client.SlackMessageAttachment.Query().
//		Select(slackmessageattachment.FieldColor).
//		Scan(ctx, &v)
func (smaq *SlackMessageAttachmentQuery) Select(fields ...string) *SlackMessageAttachmentSelect {
	smaq.ctx.Fields = append(smaq.ctx.Fields, fields...)
	sbuild := &SlackMessageAttachmentSelect{SlackMessageAttachmentQuery: smaq}
	sbuild.label = slackmessageattachment.Label
	sbuild.flds, sbuild.scan = &smaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SlackMessageAttachmentSelect configured with the given aggregations.
func (smaq *SlackMessageAttachmentQuery) Aggregate(fns ...AggregateFunc) *SlackMessageAttachmentSelect {
	return smaq.Select().Aggregate(fns...)
}

func (smaq *SlackMessageAttachmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range smaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, smaq); err != nil {
				return err
			}
		}
	}
	for _, f := range smaq.ctx.Fields {
		if !slackmessageattachment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if smaq.path != nil {
		prev, err := smaq.path(ctx)
		if err != nil {
			return err
		}
		smaq.sql = prev
	}
	return nil
}

func (smaq *SlackMessageAttachmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SlackMessageAttachment, error) {
	var (
		nodes       = []*SlackMessageAttachment{}
		withFKs     = smaq.withFKs
		_spec       = smaq.querySpec()
		loadedTypes = [1]bool{
			smaq.withMessageID != nil,
		}
	)
	if smaq.withMessageID != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, slackmessageattachment.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SlackMessageAttachment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SlackMessageAttachment{config: smaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, smaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := smaq.withMessageID; query != nil {
		if err := smaq.loadMessageID(ctx, query, nodes, nil,
			func(n *SlackMessageAttachment, e *SlackMessage) { n.Edges.MessageID = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (smaq *SlackMessageAttachmentQuery) loadMessageID(ctx context.Context, query *SlackMessageQuery, nodes []*SlackMessageAttachment, init func(*SlackMessageAttachment), assign func(*SlackMessageAttachment, *SlackMessage)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*SlackMessageAttachment)
	for i := range nodes {
		if nodes[i].message_id == nil {
			continue
		}
		fk := *nodes[i].message_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(slackmessage.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "message_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (smaq *SlackMessageAttachmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := smaq.querySpec()
	_spec.Node.Columns = smaq.ctx.Fields
	if len(smaq.ctx.Fields) > 0 {
		_spec.Unique = smaq.ctx.Unique != nil && *smaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, smaq.driver, _spec)
}

func (smaq *SlackMessageAttachmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(slackmessageattachment.Table, slackmessageattachment.Columns, sqlgraph.NewFieldSpec(slackmessageattachment.FieldID, field.TypeInt))
	_spec.From = smaq.sql
	if unique := smaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if smaq.path != nil {
		_spec.Unique = true
	}
	if fields := smaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, slackmessageattachment.FieldID)
		for i := range fields {
			if fields[i] != slackmessageattachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := smaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := smaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := smaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := smaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (smaq *SlackMessageAttachmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(smaq.driver.Dialect())
	t1 := builder.Table(slackmessageattachment.Table)
	columns := smaq.ctx.Fields
	if len(columns) == 0 {
		columns = slackmessageattachment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if smaq.sql != nil {
		selector = smaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if smaq.ctx.Unique != nil && *smaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range smaq.predicates {
		p(selector)
	}
	for _, p := range smaq.order {
		p(selector)
	}
	if offset := smaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := smaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SlackMessageAttachmentGroupBy is the group-by builder for SlackMessageAttachment entities.
type SlackMessageAttachmentGroupBy struct {
	selector
	build *SlackMessageAttachmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (smagb *SlackMessageAttachmentGroupBy) Aggregate(fns ...AggregateFunc) *SlackMessageAttachmentGroupBy {
	smagb.fns = append(smagb.fns, fns...)
	return smagb
}

// Scan applies the selector query and scans the result into the given value.
func (smagb *SlackMessageAttachmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, smagb.build.ctx, "GroupBy")
	if err := smagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SlackMessageAttachmentQuery, *SlackMessageAttachmentGroupBy](ctx, smagb.build, smagb, smagb.build.inters, v)
}

func (smagb *SlackMessageAttachmentGroupBy) sqlScan(ctx context.Context, root *SlackMessageAttachmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(smagb.fns))
	for _, fn := range smagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*smagb.flds)+len(smagb.fns))
		for _, f := range *smagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*smagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := smagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SlackMessageAttachmentSelect is the builder for selecting fields of SlackMessageAttachment entities.
type SlackMessageAttachmentSelect struct {
	*SlackMessageAttachmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (smas *SlackMessageAttachmentSelect) Aggregate(fns ...AggregateFunc) *SlackMessageAttachmentSelect {
	smas.fns = append(smas.fns, fns...)
	return smas
}

// Scan applies the selector query and scans the result into the given value.
func (smas *SlackMessageAttachmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, smas.ctx, "Select")
	if err := smas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SlackMessageAttachmentQuery, *SlackMessageAttachmentSelect](ctx, smas.SlackMessageAttachmentQuery, smas, smas.inters, v)
}

func (smas *SlackMessageAttachmentSelect) sqlScan(ctx context.Context, root *SlackMessageAttachmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(smas.fns))
	for _, fn := range smas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*smas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := smas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
