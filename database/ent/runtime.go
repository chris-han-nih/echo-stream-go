// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/echo-stream/database/ent/application"
	"github.com/echo-stream/database/ent/schema"
	"github.com/echo-stream/database/ent/slackmessage"
	"github.com/echo-stream/database/ent/user"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	applicationFields := schema.Application{}.Fields()
	_ = applicationFields
	// applicationDescApplicationId is the schema descriptor for ApplicationId field.
	applicationDescApplicationId := applicationFields[0].Descriptor()
	// application.DefaultApplicationId holds the default value on creation for the ApplicationId field.
	application.DefaultApplicationId = applicationDescApplicationId.Default.(func() uuid.UUID)
	// applicationDescName is the schema descriptor for Name field.
	applicationDescName := applicationFields[1].Descriptor()
	// application.NameValidator is a validator for the "Name" field. It is called by the builders before save.
	application.NameValidator = func() func(string) error {
		validators := applicationDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Name string) error {
			for _, fn := range fns {
				if err := fn(_Name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// applicationDescDescription is the schema descriptor for Description field.
	applicationDescDescription := applicationFields[2].Descriptor()
	// application.DescriptionValidator is a validator for the "Description" field. It is called by the builders before save.
	application.DescriptionValidator = applicationDescDescription.Validators[0].(func(string) error)
	// applicationDescSecret is the schema descriptor for Secret field.
	applicationDescSecret := applicationFields[3].Descriptor()
	// application.SecretValidator is a validator for the "Secret" field. It is called by the builders before save.
	application.SecretValidator = func() func(string) error {
		validators := applicationDescSecret.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Secret string) error {
			for _, fn := range fns {
				if err := fn(_Secret); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// applicationDescCreatedAt is the schema descriptor for CreatedAt field.
	applicationDescCreatedAt := applicationFields[4].Descriptor()
	// application.DefaultCreatedAt holds the default value on creation for the CreatedAt field.
	application.DefaultCreatedAt = applicationDescCreatedAt.Default.(func() time.Time)
	// applicationDescUpdatedAt is the schema descriptor for UpdatedAt field.
	applicationDescUpdatedAt := applicationFields[5].Descriptor()
	// application.DefaultUpdatedAt holds the default value on creation for the UpdatedAt field.
	application.DefaultUpdatedAt = applicationDescUpdatedAt.Default.(func() time.Time)
	// application.UpdateDefaultUpdatedAt holds the default value on update for the UpdatedAt field.
	application.UpdateDefaultUpdatedAt = applicationDescUpdatedAt.UpdateDefault.(func() time.Time)
	slackmessageFields := schema.SlackMessage{}.Fields()
	_ = slackmessageFields
	// slackmessageDescChannel is the schema descriptor for Channel field.
	slackmessageDescChannel := slackmessageFields[3].Descriptor()
	// slackmessage.ChannelValidator is a validator for the "Channel" field. It is called by the builders before save.
	slackmessage.ChannelValidator = slackmessageDescChannel.Validators[0].(func(string) error)
	// slackmessageDescState is the schema descriptor for State field.
	slackmessageDescState := slackmessageFields[6].Descriptor()
	// slackmessage.DefaultState holds the default value on creation for the State field.
	slackmessage.DefaultState = slackmessageDescState.Default.(string)
	// slackmessageDescRetryCount is the schema descriptor for RetryCount field.
	slackmessageDescRetryCount := slackmessageFields[7].Descriptor()
	// slackmessage.DefaultRetryCount holds the default value on creation for the RetryCount field.
	slackmessage.DefaultRetryCount = slackmessageDescRetryCount.Default.(int16)
	// slackmessageDescCreatedAt is the schema descriptor for CreatedAt field.
	slackmessageDescCreatedAt := slackmessageFields[8].Descriptor()
	// slackmessage.DefaultCreatedAt holds the default value on creation for the CreatedAt field.
	slackmessage.DefaultCreatedAt = slackmessageDescCreatedAt.Default.(func() time.Time)
	// slackmessageDescUpdatedAt is the schema descriptor for UpdatedAt field.
	slackmessageDescUpdatedAt := slackmessageFields[9].Descriptor()
	// slackmessage.DefaultUpdatedAt holds the default value on creation for the UpdatedAt field.
	slackmessage.DefaultUpdatedAt = slackmessageDescUpdatedAt.Default.(func() time.Time)
	// slackmessage.UpdateDefaultUpdatedAt holds the default value on update for the UpdatedAt field.
	slackmessage.UpdateDefaultUpdatedAt = slackmessageDescUpdatedAt.UpdateDefault.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUserId is the schema descriptor for UserId field.
	userDescUserId := userFields[0].Descriptor()
	// user.DefaultUserId holds the default value on creation for the UserId field.
	user.DefaultUserId = userDescUserId.Default.(func() uuid.UUID)
	// userDescEmail is the schema descriptor for Email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "Email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for Password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for CreatedAt field.
	userDescCreatedAt := userFields[3].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the CreatedAt field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for UpdatedAt field.
	userDescUpdatedAt := userFields[4].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the UpdatedAt field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the UpdatedAt field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
}
