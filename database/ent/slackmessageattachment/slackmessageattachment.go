// Code generated by ent, DO NOT EDIT.

package slackmessageattachment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the slackmessageattachment type in the database.
	Label = "slack_message_attachment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldFallback holds the string denoting the fallback field in the database.
	FieldFallback = "fallback"
	// FieldCallbackID holds the string denoting the callbackid field in the database.
	FieldCallbackID = "callback_id"
	// FieldAuthorID holds the string denoting the authorid field in the database.
	FieldAuthorID = "author_id"
	// FieldAuthorName holds the string denoting the authorname field in the database.
	FieldAuthorName = "author_name"
	// FieldAuthorSubname holds the string denoting the authorsubname field in the database.
	FieldAuthorSubname = "author_subname"
	// FieldAuthorLink holds the string denoting the authorlink field in the database.
	FieldAuthorLink = "author_link"
	// FieldAuthorIcon holds the string denoting the authoricon field in the database.
	FieldAuthorIcon = "author_icon"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldTitleLink holds the string denoting the titlelink field in the database.
	FieldTitleLink = "title_link"
	// FieldPretext holds the string denoting the pretext field in the database.
	FieldPretext = "pretext"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldImageURL holds the string denoting the imageurl field in the database.
	FieldImageURL = "image_url"
	// FieldThumbURL holds the string denoting the thumburl field in the database.
	FieldThumbURL = "thumb_url"
	// EdgeMessageID holds the string denoting the message_id edge name in mutations.
	EdgeMessageID = "message_id"
	// Table holds the table name of the slackmessageattachment in the database.
	Table = "slack_message_attachments"
	// MessageIDTable is the table that holds the message_id relation/edge.
	MessageIDTable = "slack_message_attachments"
	// MessageIDInverseTable is the table name for the SlackMessage entity.
	// It exists in this package in order to avoid circular dependency with the "slackmessage" package.
	MessageIDInverseTable = "slack_messages"
	// MessageIDColumn is the table column denoting the message_id relation/edge.
	MessageIDColumn = "message_id"
)

// Columns holds all SQL columns for slackmessageattachment fields.
var Columns = []string{
	FieldID,
	FieldColor,
	FieldFallback,
	FieldCallbackID,
	FieldAuthorID,
	FieldAuthorName,
	FieldAuthorSubname,
	FieldAuthorLink,
	FieldAuthorIcon,
	FieldTitle,
	FieldTitleLink,
	FieldPretext,
	FieldText,
	FieldImageURL,
	FieldThumbURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "slack_message_attachments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"message_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SlackMessageAttachment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByColor orders the results by the Color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByFallback orders the results by the Fallback field.
func ByFallback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFallback, opts...).ToFunc()
}

// ByCallbackID orders the results by the CallbackID field.
func ByCallbackID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallbackID, opts...).ToFunc()
}

// ByAuthorID orders the results by the AuthorID field.
func ByAuthorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorID, opts...).ToFunc()
}

// ByAuthorName orders the results by the AuthorName field.
func ByAuthorName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorName, opts...).ToFunc()
}

// ByAuthorSubname orders the results by the AuthorSubname field.
func ByAuthorSubname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorSubname, opts...).ToFunc()
}

// ByAuthorLink orders the results by the AuthorLink field.
func ByAuthorLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorLink, opts...).ToFunc()
}

// ByAuthorIcon orders the results by the AuthorIcon field.
func ByAuthorIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorIcon, opts...).ToFunc()
}

// ByTitle orders the results by the Title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByTitleLink orders the results by the TitleLink field.
func ByTitleLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleLink, opts...).ToFunc()
}

// ByPretext orders the results by the Pretext field.
func ByPretext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPretext, opts...).ToFunc()
}

// ByText orders the results by the Text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByImageURL orders the results by the ImageURL field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByThumbURL orders the results by the ThumbURL field.
func ByThumbURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumbURL, opts...).ToFunc()
}

// ByMessageIDField orders the results by message_id field.
func ByMessageIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessageIDStep(), sql.OrderByField(field, opts...))
	}
}
func newMessageIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessageIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MessageIDTable, MessageIDColumn),
	)
}
