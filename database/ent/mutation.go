// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/echo-stream/database/ent/application"
	"github.com/echo-stream/database/ent/predicate"
	"github.com/echo-stream/database/ent/slackmessage"
	"github.com/echo-stream/database/ent/slackmessageattachment"
	"github.com/echo-stream/database/ent/user"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApplication            = "Application"
	TypeSlackMessage           = "SlackMessage"
	TypeSlackMessageAttachment = "SlackMessageAttachment"
	TypeUser                   = "User"
)

// ApplicationMutation represents an operation that mutates the Application nodes in the graph.
type ApplicationMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Name          *string
	_Description   *string
	_Secret        *string
	_CreatedAt     *time.Time
	_UpdatedAt     *time.Time
	clearedFields  map[string]struct{}
	user_id        *int
	cleareduser_id bool
	done           bool
	oldValue       func(context.Context) (*Application, error)
	predicates     []predicate.Application
}

var _ ent.Mutation = (*ApplicationMutation)(nil)

// applicationOption allows management of the mutation configuration using functional options.
type applicationOption func(*ApplicationMutation)

// newApplicationMutation creates new mutation for the Application entity.
func newApplicationMutation(c config, op Op, opts ...applicationOption) *ApplicationMutation {
	m := &ApplicationMutation{
		config:        c,
		op:            op,
		typ:           TypeApplication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApplicationID sets the ID field of the mutation.
func withApplicationID(id int) applicationOption {
	return func(m *ApplicationMutation) {
		var (
			err   error
			once  sync.Once
			value *Application
		)
		m.oldValue = func(ctx context.Context) (*Application, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Application.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApplication sets the old Application of the mutation.
func withApplication(node *Application) applicationOption {
	return func(m *ApplicationMutation) {
		m.oldValue = func(context.Context) (*Application, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApplicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApplicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApplicationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApplicationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Application.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "Name" field.
func (m *ApplicationMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *ApplicationMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *ApplicationMutation) ResetName() {
	m._Name = nil
}

// SetDescription sets the "Description" field.
func (m *ApplicationMutation) SetDescription(s string) {
	m._Description = &s
}

// Description returns the value of the "Description" field in the mutation.
func (m *ApplicationMutation) Description() (r string, exists bool) {
	v := m._Description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "Description" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "Description" field.
func (m *ApplicationMutation) ResetDescription() {
	m._Description = nil
}

// SetSecret sets the "Secret" field.
func (m *ApplicationMutation) SetSecret(s string) {
	m._Secret = &s
}

// Secret returns the value of the "Secret" field in the mutation.
func (m *ApplicationMutation) Secret() (r string, exists bool) {
	v := m._Secret
	if v == nil {
		return
	}
	return *v, true
}

// OldSecret returns the old "Secret" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecret: %w", err)
	}
	return oldValue.Secret, nil
}

// ResetSecret resets all changes to the "Secret" field.
func (m *ApplicationMutation) ResetSecret() {
	m._Secret = nil
}

// SetCreatedAt sets the "CreatedAt" field.
func (m *ApplicationMutation) SetCreatedAt(t time.Time) {
	m._CreatedAt = &t
}

// CreatedAt returns the value of the "CreatedAt" field in the mutation.
func (m *ApplicationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m._CreatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "CreatedAt" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "CreatedAt" field.
func (m *ApplicationMutation) ResetCreatedAt() {
	m._CreatedAt = nil
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (m *ApplicationMutation) SetUpdatedAt(t time.Time) {
	m._UpdatedAt = &t
}

// UpdatedAt returns the value of the "UpdatedAt" field in the mutation.
func (m *ApplicationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m._UpdatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "UpdatedAt" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "UpdatedAt" field.
func (m *ApplicationMutation) ResetUpdatedAt() {
	m._UpdatedAt = nil
}

// SetUserIDID sets the "user_id" edge to the User entity by id.
func (m *ApplicationMutation) SetUserIDID(id int) {
	m.user_id = &id
}

// ClearUserID clears the "user_id" edge to the User entity.
func (m *ApplicationMutation) ClearUserID() {
	m.cleareduser_id = true
}

// UserIDCleared reports if the "user_id" edge to the User entity was cleared.
func (m *ApplicationMutation) UserIDCleared() bool {
	return m.cleareduser_id
}

// UserIDID returns the "user_id" edge ID in the mutation.
func (m *ApplicationMutation) UserIDID() (id int, exists bool) {
	if m.user_id != nil {
		return *m.user_id, true
	}
	return
}

// UserIDIDs returns the "user_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserIDID instead. It exists only for internal usage by the builders.
func (m *ApplicationMutation) UserIDIDs() (ids []int) {
	if id := m.user_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserID resets all changes to the "user_id" edge.
func (m *ApplicationMutation) ResetUserID() {
	m.user_id = nil
	m.cleareduser_id = false
}

// Where appends a list predicates to the ApplicationMutation builder.
func (m *ApplicationMutation) Where(ps ...predicate.Application) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApplicationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApplicationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Application, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApplicationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApplicationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Application).
func (m *ApplicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApplicationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._Name != nil {
		fields = append(fields, application.FieldName)
	}
	if m._Description != nil {
		fields = append(fields, application.FieldDescription)
	}
	if m._Secret != nil {
		fields = append(fields, application.FieldSecret)
	}
	if m._CreatedAt != nil {
		fields = append(fields, application.FieldCreatedAt)
	}
	if m._UpdatedAt != nil {
		fields = append(fields, application.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApplicationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case application.FieldName:
		return m.Name()
	case application.FieldDescription:
		return m.Description()
	case application.FieldSecret:
		return m.Secret()
	case application.FieldCreatedAt:
		return m.CreatedAt()
	case application.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApplicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case application.FieldName:
		return m.OldName(ctx)
	case application.FieldDescription:
		return m.OldDescription(ctx)
	case application.FieldSecret:
		return m.OldSecret(ctx)
	case application.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case application.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Application field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case application.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case application.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case application.FieldSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecret(v)
		return nil
	case application.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case application.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApplicationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApplicationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Application numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApplicationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApplicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApplicationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Application nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApplicationMutation) ResetField(name string) error {
	switch name {
	case application.FieldName:
		m.ResetName()
		return nil
	case application.FieldDescription:
		m.ResetDescription()
		return nil
	case application.FieldSecret:
		m.ResetSecret()
		return nil
	case application.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case application.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApplicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user_id != nil {
		edges = append(edges, application.EdgeUserID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApplicationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case application.EdgeUserID:
		if id := m.user_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApplicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApplicationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApplicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser_id {
		edges = append(edges, application.EdgeUserID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApplicationMutation) EdgeCleared(name string) bool {
	switch name {
	case application.EdgeUserID:
		return m.cleareduser_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApplicationMutation) ClearEdge(name string) error {
	switch name {
	case application.EdgeUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown Application unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApplicationMutation) ResetEdge(name string) error {
	switch name {
	case application.EdgeUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Application edge %s", name)
}

// SlackMessageMutation represents an operation that mutates the SlackMessage nodes in the graph.
type SlackMessageMutation struct {
	config
	op                               Op
	typ                              string
	id                               *int
	_ApplicationId                   *uuid.UUID
	_UserName                        *string
	_IconEmoji                       *string
	_Channel                         *string
	_Text                            *string
	_ThreadTs                        *string
	_State                           *string
	_RetryCount                      *int16
	add_RetryCount                   *int16
	_CreatedAt                       *time.Time
	_UpdatedAt                       *time.Time
	clearedFields                    map[string]struct{}
	slack_message_attachments        map[int]struct{}
	removedslack_message_attachments map[int]struct{}
	clearedslack_message_attachments bool
	done                             bool
	oldValue                         func(context.Context) (*SlackMessage, error)
	predicates                       []predicate.SlackMessage
}

var _ ent.Mutation = (*SlackMessageMutation)(nil)

// slackmessageOption allows management of the mutation configuration using functional options.
type slackmessageOption func(*SlackMessageMutation)

// newSlackMessageMutation creates new mutation for the SlackMessage entity.
func newSlackMessageMutation(c config, op Op, opts ...slackmessageOption) *SlackMessageMutation {
	m := &SlackMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeSlackMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSlackMessageID sets the ID field of the mutation.
func withSlackMessageID(id int) slackmessageOption {
	return func(m *SlackMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *SlackMessage
		)
		m.oldValue = func(ctx context.Context) (*SlackMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SlackMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSlackMessage sets the old SlackMessage of the mutation.
func withSlackMessage(node *SlackMessage) slackmessageOption {
	return func(m *SlackMessageMutation) {
		m.oldValue = func(context.Context) (*SlackMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SlackMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SlackMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SlackMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SlackMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SlackMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetApplicationId sets the "ApplicationId" field.
func (m *SlackMessageMutation) SetApplicationId(u uuid.UUID) {
	m._ApplicationId = &u
}

// ApplicationId returns the value of the "ApplicationId" field in the mutation.
func (m *SlackMessageMutation) ApplicationId() (r uuid.UUID, exists bool) {
	v := m._ApplicationId
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicationId returns the old "ApplicationId" field's value of the SlackMessage entity.
// If the SlackMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageMutation) OldApplicationId(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicationId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicationId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicationId: %w", err)
	}
	return oldValue.ApplicationId, nil
}

// ResetApplicationId resets all changes to the "ApplicationId" field.
func (m *SlackMessageMutation) ResetApplicationId() {
	m._ApplicationId = nil
}

// SetUserName sets the "UserName" field.
func (m *SlackMessageMutation) SetUserName(s string) {
	m._UserName = &s
}

// UserName returns the value of the "UserName" field in the mutation.
func (m *SlackMessageMutation) UserName() (r string, exists bool) {
	v := m._UserName
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "UserName" field's value of the SlackMessage entity.
// If the SlackMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ClearUserName clears the value of the "UserName" field.
func (m *SlackMessageMutation) ClearUserName() {
	m._UserName = nil
	m.clearedFields[slackmessage.FieldUserName] = struct{}{}
}

// UserNameCleared returns if the "UserName" field was cleared in this mutation.
func (m *SlackMessageMutation) UserNameCleared() bool {
	_, ok := m.clearedFields[slackmessage.FieldUserName]
	return ok
}

// ResetUserName resets all changes to the "UserName" field.
func (m *SlackMessageMutation) ResetUserName() {
	m._UserName = nil
	delete(m.clearedFields, slackmessage.FieldUserName)
}

// SetIconEmoji sets the "IconEmoji" field.
func (m *SlackMessageMutation) SetIconEmoji(s string) {
	m._IconEmoji = &s
}

// IconEmoji returns the value of the "IconEmoji" field in the mutation.
func (m *SlackMessageMutation) IconEmoji() (r string, exists bool) {
	v := m._IconEmoji
	if v == nil {
		return
	}
	return *v, true
}

// OldIconEmoji returns the old "IconEmoji" field's value of the SlackMessage entity.
// If the SlackMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageMutation) OldIconEmoji(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIconEmoji is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIconEmoji requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIconEmoji: %w", err)
	}
	return oldValue.IconEmoji, nil
}

// ClearIconEmoji clears the value of the "IconEmoji" field.
func (m *SlackMessageMutation) ClearIconEmoji() {
	m._IconEmoji = nil
	m.clearedFields[slackmessage.FieldIconEmoji] = struct{}{}
}

// IconEmojiCleared returns if the "IconEmoji" field was cleared in this mutation.
func (m *SlackMessageMutation) IconEmojiCleared() bool {
	_, ok := m.clearedFields[slackmessage.FieldIconEmoji]
	return ok
}

// ResetIconEmoji resets all changes to the "IconEmoji" field.
func (m *SlackMessageMutation) ResetIconEmoji() {
	m._IconEmoji = nil
	delete(m.clearedFields, slackmessage.FieldIconEmoji)
}

// SetChannel sets the "Channel" field.
func (m *SlackMessageMutation) SetChannel(s string) {
	m._Channel = &s
}

// Channel returns the value of the "Channel" field in the mutation.
func (m *SlackMessageMutation) Channel() (r string, exists bool) {
	v := m._Channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannel returns the old "Channel" field's value of the SlackMessage entity.
// If the SlackMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageMutation) OldChannel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannel: %w", err)
	}
	return oldValue.Channel, nil
}

// ResetChannel resets all changes to the "Channel" field.
func (m *SlackMessageMutation) ResetChannel() {
	m._Channel = nil
}

// SetText sets the "Text" field.
func (m *SlackMessageMutation) SetText(s string) {
	m._Text = &s
}

// Text returns the value of the "Text" field in the mutation.
func (m *SlackMessageMutation) Text() (r string, exists bool) {
	v := m._Text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "Text" field's value of the SlackMessage entity.
// If the SlackMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ClearText clears the value of the "Text" field.
func (m *SlackMessageMutation) ClearText() {
	m._Text = nil
	m.clearedFields[slackmessage.FieldText] = struct{}{}
}

// TextCleared returns if the "Text" field was cleared in this mutation.
func (m *SlackMessageMutation) TextCleared() bool {
	_, ok := m.clearedFields[slackmessage.FieldText]
	return ok
}

// ResetText resets all changes to the "Text" field.
func (m *SlackMessageMutation) ResetText() {
	m._Text = nil
	delete(m.clearedFields, slackmessage.FieldText)
}

// SetThreadTs sets the "ThreadTs" field.
func (m *SlackMessageMutation) SetThreadTs(s string) {
	m._ThreadTs = &s
}

// ThreadTs returns the value of the "ThreadTs" field in the mutation.
func (m *SlackMessageMutation) ThreadTs() (r string, exists bool) {
	v := m._ThreadTs
	if v == nil {
		return
	}
	return *v, true
}

// OldThreadTs returns the old "ThreadTs" field's value of the SlackMessage entity.
// If the SlackMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageMutation) OldThreadTs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThreadTs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThreadTs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThreadTs: %w", err)
	}
	return oldValue.ThreadTs, nil
}

// ClearThreadTs clears the value of the "ThreadTs" field.
func (m *SlackMessageMutation) ClearThreadTs() {
	m._ThreadTs = nil
	m.clearedFields[slackmessage.FieldThreadTs] = struct{}{}
}

// ThreadTsCleared returns if the "ThreadTs" field was cleared in this mutation.
func (m *SlackMessageMutation) ThreadTsCleared() bool {
	_, ok := m.clearedFields[slackmessage.FieldThreadTs]
	return ok
}

// ResetThreadTs resets all changes to the "ThreadTs" field.
func (m *SlackMessageMutation) ResetThreadTs() {
	m._ThreadTs = nil
	delete(m.clearedFields, slackmessage.FieldThreadTs)
}

// SetState sets the "State" field.
func (m *SlackMessageMutation) SetState(s string) {
	m._State = &s
}

// State returns the value of the "State" field in the mutation.
func (m *SlackMessageMutation) State() (r string, exists bool) {
	v := m._State
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "State" field's value of the SlackMessage entity.
// If the SlackMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ClearState clears the value of the "State" field.
func (m *SlackMessageMutation) ClearState() {
	m._State = nil
	m.clearedFields[slackmessage.FieldState] = struct{}{}
}

// StateCleared returns if the "State" field was cleared in this mutation.
func (m *SlackMessageMutation) StateCleared() bool {
	_, ok := m.clearedFields[slackmessage.FieldState]
	return ok
}

// ResetState resets all changes to the "State" field.
func (m *SlackMessageMutation) ResetState() {
	m._State = nil
	delete(m.clearedFields, slackmessage.FieldState)
}

// SetRetryCount sets the "RetryCount" field.
func (m *SlackMessageMutation) SetRetryCount(i int16) {
	m._RetryCount = &i
	m.add_RetryCount = nil
}

// RetryCount returns the value of the "RetryCount" field in the mutation.
func (m *SlackMessageMutation) RetryCount() (r int16, exists bool) {
	v := m._RetryCount
	if v == nil {
		return
	}
	return *v, true
}

// OldRetryCount returns the old "RetryCount" field's value of the SlackMessage entity.
// If the SlackMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageMutation) OldRetryCount(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetryCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetryCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetryCount: %w", err)
	}
	return oldValue.RetryCount, nil
}

// AddRetryCount adds i to the "RetryCount" field.
func (m *SlackMessageMutation) AddRetryCount(i int16) {
	if m.add_RetryCount != nil {
		*m.add_RetryCount += i
	} else {
		m.add_RetryCount = &i
	}
}

// AddedRetryCount returns the value that was added to the "RetryCount" field in this mutation.
func (m *SlackMessageMutation) AddedRetryCount() (r int16, exists bool) {
	v := m.add_RetryCount
	if v == nil {
		return
	}
	return *v, true
}

// ClearRetryCount clears the value of the "RetryCount" field.
func (m *SlackMessageMutation) ClearRetryCount() {
	m._RetryCount = nil
	m.add_RetryCount = nil
	m.clearedFields[slackmessage.FieldRetryCount] = struct{}{}
}

// RetryCountCleared returns if the "RetryCount" field was cleared in this mutation.
func (m *SlackMessageMutation) RetryCountCleared() bool {
	_, ok := m.clearedFields[slackmessage.FieldRetryCount]
	return ok
}

// ResetRetryCount resets all changes to the "RetryCount" field.
func (m *SlackMessageMutation) ResetRetryCount() {
	m._RetryCount = nil
	m.add_RetryCount = nil
	delete(m.clearedFields, slackmessage.FieldRetryCount)
}

// SetCreatedAt sets the "CreatedAt" field.
func (m *SlackMessageMutation) SetCreatedAt(t time.Time) {
	m._CreatedAt = &t
}

// CreatedAt returns the value of the "CreatedAt" field in the mutation.
func (m *SlackMessageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m._CreatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "CreatedAt" field's value of the SlackMessage entity.
// If the SlackMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "CreatedAt" field.
func (m *SlackMessageMutation) ResetCreatedAt() {
	m._CreatedAt = nil
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (m *SlackMessageMutation) SetUpdatedAt(t time.Time) {
	m._UpdatedAt = &t
}

// UpdatedAt returns the value of the "UpdatedAt" field in the mutation.
func (m *SlackMessageMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m._UpdatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "UpdatedAt" field's value of the SlackMessage entity.
// If the SlackMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "UpdatedAt" field.
func (m *SlackMessageMutation) ResetUpdatedAt() {
	m._UpdatedAt = nil
}

// AddSlackMessageAttachmentIDs adds the "slack_message_attachments" edge to the SlackMessageAttachment entity by ids.
func (m *SlackMessageMutation) AddSlackMessageAttachmentIDs(ids ...int) {
	if m.slack_message_attachments == nil {
		m.slack_message_attachments = make(map[int]struct{})
	}
	for i := range ids {
		m.slack_message_attachments[ids[i]] = struct{}{}
	}
}

// ClearSlackMessageAttachments clears the "slack_message_attachments" edge to the SlackMessageAttachment entity.
func (m *SlackMessageMutation) ClearSlackMessageAttachments() {
	m.clearedslack_message_attachments = true
}

// SlackMessageAttachmentsCleared reports if the "slack_message_attachments" edge to the SlackMessageAttachment entity was cleared.
func (m *SlackMessageMutation) SlackMessageAttachmentsCleared() bool {
	return m.clearedslack_message_attachments
}

// RemoveSlackMessageAttachmentIDs removes the "slack_message_attachments" edge to the SlackMessageAttachment entity by IDs.
func (m *SlackMessageMutation) RemoveSlackMessageAttachmentIDs(ids ...int) {
	if m.removedslack_message_attachments == nil {
		m.removedslack_message_attachments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.slack_message_attachments, ids[i])
		m.removedslack_message_attachments[ids[i]] = struct{}{}
	}
}

// RemovedSlackMessageAttachments returns the removed IDs of the "slack_message_attachments" edge to the SlackMessageAttachment entity.
func (m *SlackMessageMutation) RemovedSlackMessageAttachmentsIDs() (ids []int) {
	for id := range m.removedslack_message_attachments {
		ids = append(ids, id)
	}
	return
}

// SlackMessageAttachmentsIDs returns the "slack_message_attachments" edge IDs in the mutation.
func (m *SlackMessageMutation) SlackMessageAttachmentsIDs() (ids []int) {
	for id := range m.slack_message_attachments {
		ids = append(ids, id)
	}
	return
}

// ResetSlackMessageAttachments resets all changes to the "slack_message_attachments" edge.
func (m *SlackMessageMutation) ResetSlackMessageAttachments() {
	m.slack_message_attachments = nil
	m.clearedslack_message_attachments = false
	m.removedslack_message_attachments = nil
}

// Where appends a list predicates to the SlackMessageMutation builder.
func (m *SlackMessageMutation) Where(ps ...predicate.SlackMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SlackMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SlackMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SlackMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SlackMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SlackMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SlackMessage).
func (m *SlackMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SlackMessageMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m._ApplicationId != nil {
		fields = append(fields, slackmessage.FieldApplicationId)
	}
	if m._UserName != nil {
		fields = append(fields, slackmessage.FieldUserName)
	}
	if m._IconEmoji != nil {
		fields = append(fields, slackmessage.FieldIconEmoji)
	}
	if m._Channel != nil {
		fields = append(fields, slackmessage.FieldChannel)
	}
	if m._Text != nil {
		fields = append(fields, slackmessage.FieldText)
	}
	if m._ThreadTs != nil {
		fields = append(fields, slackmessage.FieldThreadTs)
	}
	if m._State != nil {
		fields = append(fields, slackmessage.FieldState)
	}
	if m._RetryCount != nil {
		fields = append(fields, slackmessage.FieldRetryCount)
	}
	if m._CreatedAt != nil {
		fields = append(fields, slackmessage.FieldCreatedAt)
	}
	if m._UpdatedAt != nil {
		fields = append(fields, slackmessage.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SlackMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case slackmessage.FieldApplicationId:
		return m.ApplicationId()
	case slackmessage.FieldUserName:
		return m.UserName()
	case slackmessage.FieldIconEmoji:
		return m.IconEmoji()
	case slackmessage.FieldChannel:
		return m.Channel()
	case slackmessage.FieldText:
		return m.Text()
	case slackmessage.FieldThreadTs:
		return m.ThreadTs()
	case slackmessage.FieldState:
		return m.State()
	case slackmessage.FieldRetryCount:
		return m.RetryCount()
	case slackmessage.FieldCreatedAt:
		return m.CreatedAt()
	case slackmessage.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SlackMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case slackmessage.FieldApplicationId:
		return m.OldApplicationId(ctx)
	case slackmessage.FieldUserName:
		return m.OldUserName(ctx)
	case slackmessage.FieldIconEmoji:
		return m.OldIconEmoji(ctx)
	case slackmessage.FieldChannel:
		return m.OldChannel(ctx)
	case slackmessage.FieldText:
		return m.OldText(ctx)
	case slackmessage.FieldThreadTs:
		return m.OldThreadTs(ctx)
	case slackmessage.FieldState:
		return m.OldState(ctx)
	case slackmessage.FieldRetryCount:
		return m.OldRetryCount(ctx)
	case slackmessage.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case slackmessage.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SlackMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SlackMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case slackmessage.FieldApplicationId:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicationId(v)
		return nil
	case slackmessage.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case slackmessage.FieldIconEmoji:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIconEmoji(v)
		return nil
	case slackmessage.FieldChannel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannel(v)
		return nil
	case slackmessage.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case slackmessage.FieldThreadTs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThreadTs(v)
		return nil
	case slackmessage.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case slackmessage.FieldRetryCount:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetryCount(v)
		return nil
	case slackmessage.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case slackmessage.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SlackMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SlackMessageMutation) AddedFields() []string {
	var fields []string
	if m.add_RetryCount != nil {
		fields = append(fields, slackmessage.FieldRetryCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SlackMessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case slackmessage.FieldRetryCount:
		return m.AddedRetryCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SlackMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case slackmessage.FieldRetryCount:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetryCount(v)
		return nil
	}
	return fmt.Errorf("unknown SlackMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SlackMessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(slackmessage.FieldUserName) {
		fields = append(fields, slackmessage.FieldUserName)
	}
	if m.FieldCleared(slackmessage.FieldIconEmoji) {
		fields = append(fields, slackmessage.FieldIconEmoji)
	}
	if m.FieldCleared(slackmessage.FieldText) {
		fields = append(fields, slackmessage.FieldText)
	}
	if m.FieldCleared(slackmessage.FieldThreadTs) {
		fields = append(fields, slackmessage.FieldThreadTs)
	}
	if m.FieldCleared(slackmessage.FieldState) {
		fields = append(fields, slackmessage.FieldState)
	}
	if m.FieldCleared(slackmessage.FieldRetryCount) {
		fields = append(fields, slackmessage.FieldRetryCount)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SlackMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SlackMessageMutation) ClearField(name string) error {
	switch name {
	case slackmessage.FieldUserName:
		m.ClearUserName()
		return nil
	case slackmessage.FieldIconEmoji:
		m.ClearIconEmoji()
		return nil
	case slackmessage.FieldText:
		m.ClearText()
		return nil
	case slackmessage.FieldThreadTs:
		m.ClearThreadTs()
		return nil
	case slackmessage.FieldState:
		m.ClearState()
		return nil
	case slackmessage.FieldRetryCount:
		m.ClearRetryCount()
		return nil
	}
	return fmt.Errorf("unknown SlackMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SlackMessageMutation) ResetField(name string) error {
	switch name {
	case slackmessage.FieldApplicationId:
		m.ResetApplicationId()
		return nil
	case slackmessage.FieldUserName:
		m.ResetUserName()
		return nil
	case slackmessage.FieldIconEmoji:
		m.ResetIconEmoji()
		return nil
	case slackmessage.FieldChannel:
		m.ResetChannel()
		return nil
	case slackmessage.FieldText:
		m.ResetText()
		return nil
	case slackmessage.FieldThreadTs:
		m.ResetThreadTs()
		return nil
	case slackmessage.FieldState:
		m.ResetState()
		return nil
	case slackmessage.FieldRetryCount:
		m.ResetRetryCount()
		return nil
	case slackmessage.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case slackmessage.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown SlackMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SlackMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.slack_message_attachments != nil {
		edges = append(edges, slackmessage.EdgeSlackMessageAttachments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SlackMessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case slackmessage.EdgeSlackMessageAttachments:
		ids := make([]ent.Value, 0, len(m.slack_message_attachments))
		for id := range m.slack_message_attachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SlackMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedslack_message_attachments != nil {
		edges = append(edges, slackmessage.EdgeSlackMessageAttachments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SlackMessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case slackmessage.EdgeSlackMessageAttachments:
		ids := make([]ent.Value, 0, len(m.removedslack_message_attachments))
		for id := range m.removedslack_message_attachments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SlackMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedslack_message_attachments {
		edges = append(edges, slackmessage.EdgeSlackMessageAttachments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SlackMessageMutation) EdgeCleared(name string) bool {
	switch name {
	case slackmessage.EdgeSlackMessageAttachments:
		return m.clearedslack_message_attachments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SlackMessageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SlackMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SlackMessageMutation) ResetEdge(name string) error {
	switch name {
	case slackmessage.EdgeSlackMessageAttachments:
		m.ResetSlackMessageAttachments()
		return nil
	}
	return fmt.Errorf("unknown SlackMessage edge %s", name)
}

// SlackMessageAttachmentMutation represents an operation that mutates the SlackMessageAttachment nodes in the graph.
type SlackMessageAttachmentMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_Color            *string
	_Fallback         *string
	_CallbackID       *string
	_AuthorID         *string
	_AuthorName       *string
	_AuthorSubname    *string
	_AuthorLink       *string
	_AuthorIcon       *string
	_Title            *string
	_TitleLink        *string
	_Pretext          *string
	_Text             *string
	_ImageURL         *string
	_ThumbURL         *string
	clearedFields     map[string]struct{}
	message_id        *int
	clearedmessage_id bool
	done              bool
	oldValue          func(context.Context) (*SlackMessageAttachment, error)
	predicates        []predicate.SlackMessageAttachment
}

var _ ent.Mutation = (*SlackMessageAttachmentMutation)(nil)

// slackmessageattachmentOption allows management of the mutation configuration using functional options.
type slackmessageattachmentOption func(*SlackMessageAttachmentMutation)

// newSlackMessageAttachmentMutation creates new mutation for the SlackMessageAttachment entity.
func newSlackMessageAttachmentMutation(c config, op Op, opts ...slackmessageattachmentOption) *SlackMessageAttachmentMutation {
	m := &SlackMessageAttachmentMutation{
		config:        c,
		op:            op,
		typ:           TypeSlackMessageAttachment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSlackMessageAttachmentID sets the ID field of the mutation.
func withSlackMessageAttachmentID(id int) slackmessageattachmentOption {
	return func(m *SlackMessageAttachmentMutation) {
		var (
			err   error
			once  sync.Once
			value *SlackMessageAttachment
		)
		m.oldValue = func(ctx context.Context) (*SlackMessageAttachment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SlackMessageAttachment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSlackMessageAttachment sets the old SlackMessageAttachment of the mutation.
func withSlackMessageAttachment(node *SlackMessageAttachment) slackmessageattachmentOption {
	return func(m *SlackMessageAttachmentMutation) {
		m.oldValue = func(context.Context) (*SlackMessageAttachment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SlackMessageAttachmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SlackMessageAttachmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SlackMessageAttachmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SlackMessageAttachmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SlackMessageAttachment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetColor sets the "Color" field.
func (m *SlackMessageAttachmentMutation) SetColor(s string) {
	m._Color = &s
}

// Color returns the value of the "Color" field in the mutation.
func (m *SlackMessageAttachmentMutation) Color() (r string, exists bool) {
	v := m._Color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "Color" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ClearColor clears the value of the "Color" field.
func (m *SlackMessageAttachmentMutation) ClearColor() {
	m._Color = nil
	m.clearedFields[slackmessageattachment.FieldColor] = struct{}{}
}

// ColorCleared returns if the "Color" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) ColorCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldColor]
	return ok
}

// ResetColor resets all changes to the "Color" field.
func (m *SlackMessageAttachmentMutation) ResetColor() {
	m._Color = nil
	delete(m.clearedFields, slackmessageattachment.FieldColor)
}

// SetFallback sets the "Fallback" field.
func (m *SlackMessageAttachmentMutation) SetFallback(s string) {
	m._Fallback = &s
}

// Fallback returns the value of the "Fallback" field in the mutation.
func (m *SlackMessageAttachmentMutation) Fallback() (r string, exists bool) {
	v := m._Fallback
	if v == nil {
		return
	}
	return *v, true
}

// OldFallback returns the old "Fallback" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldFallback(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFallback is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFallback requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFallback: %w", err)
	}
	return oldValue.Fallback, nil
}

// ClearFallback clears the value of the "Fallback" field.
func (m *SlackMessageAttachmentMutation) ClearFallback() {
	m._Fallback = nil
	m.clearedFields[slackmessageattachment.FieldFallback] = struct{}{}
}

// FallbackCleared returns if the "Fallback" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) FallbackCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldFallback]
	return ok
}

// ResetFallback resets all changes to the "Fallback" field.
func (m *SlackMessageAttachmentMutation) ResetFallback() {
	m._Fallback = nil
	delete(m.clearedFields, slackmessageattachment.FieldFallback)
}

// SetCallbackID sets the "CallbackID" field.
func (m *SlackMessageAttachmentMutation) SetCallbackID(s string) {
	m._CallbackID = &s
}

// CallbackID returns the value of the "CallbackID" field in the mutation.
func (m *SlackMessageAttachmentMutation) CallbackID() (r string, exists bool) {
	v := m._CallbackID
	if v == nil {
		return
	}
	return *v, true
}

// OldCallbackID returns the old "CallbackID" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldCallbackID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCallbackID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCallbackID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCallbackID: %w", err)
	}
	return oldValue.CallbackID, nil
}

// ClearCallbackID clears the value of the "CallbackID" field.
func (m *SlackMessageAttachmentMutation) ClearCallbackID() {
	m._CallbackID = nil
	m.clearedFields[slackmessageattachment.FieldCallbackID] = struct{}{}
}

// CallbackIDCleared returns if the "CallbackID" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) CallbackIDCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldCallbackID]
	return ok
}

// ResetCallbackID resets all changes to the "CallbackID" field.
func (m *SlackMessageAttachmentMutation) ResetCallbackID() {
	m._CallbackID = nil
	delete(m.clearedFields, slackmessageattachment.FieldCallbackID)
}

// SetAuthorID sets the "AuthorID" field.
func (m *SlackMessageAttachmentMutation) SetAuthorID(s string) {
	m._AuthorID = &s
}

// AuthorID returns the value of the "AuthorID" field in the mutation.
func (m *SlackMessageAttachmentMutation) AuthorID() (r string, exists bool) {
	v := m._AuthorID
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorID returns the old "AuthorID" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldAuthorID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorID: %w", err)
	}
	return oldValue.AuthorID, nil
}

// ClearAuthorID clears the value of the "AuthorID" field.
func (m *SlackMessageAttachmentMutation) ClearAuthorID() {
	m._AuthorID = nil
	m.clearedFields[slackmessageattachment.FieldAuthorID] = struct{}{}
}

// AuthorIDCleared returns if the "AuthorID" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) AuthorIDCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldAuthorID]
	return ok
}

// ResetAuthorID resets all changes to the "AuthorID" field.
func (m *SlackMessageAttachmentMutation) ResetAuthorID() {
	m._AuthorID = nil
	delete(m.clearedFields, slackmessageattachment.FieldAuthorID)
}

// SetAuthorName sets the "AuthorName" field.
func (m *SlackMessageAttachmentMutation) SetAuthorName(s string) {
	m._AuthorName = &s
}

// AuthorName returns the value of the "AuthorName" field in the mutation.
func (m *SlackMessageAttachmentMutation) AuthorName() (r string, exists bool) {
	v := m._AuthorName
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorName returns the old "AuthorName" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldAuthorName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorName: %w", err)
	}
	return oldValue.AuthorName, nil
}

// ClearAuthorName clears the value of the "AuthorName" field.
func (m *SlackMessageAttachmentMutation) ClearAuthorName() {
	m._AuthorName = nil
	m.clearedFields[slackmessageattachment.FieldAuthorName] = struct{}{}
}

// AuthorNameCleared returns if the "AuthorName" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) AuthorNameCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldAuthorName]
	return ok
}

// ResetAuthorName resets all changes to the "AuthorName" field.
func (m *SlackMessageAttachmentMutation) ResetAuthorName() {
	m._AuthorName = nil
	delete(m.clearedFields, slackmessageattachment.FieldAuthorName)
}

// SetAuthorSubname sets the "AuthorSubname" field.
func (m *SlackMessageAttachmentMutation) SetAuthorSubname(s string) {
	m._AuthorSubname = &s
}

// AuthorSubname returns the value of the "AuthorSubname" field in the mutation.
func (m *SlackMessageAttachmentMutation) AuthorSubname() (r string, exists bool) {
	v := m._AuthorSubname
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorSubname returns the old "AuthorSubname" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldAuthorSubname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorSubname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorSubname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorSubname: %w", err)
	}
	return oldValue.AuthorSubname, nil
}

// ClearAuthorSubname clears the value of the "AuthorSubname" field.
func (m *SlackMessageAttachmentMutation) ClearAuthorSubname() {
	m._AuthorSubname = nil
	m.clearedFields[slackmessageattachment.FieldAuthorSubname] = struct{}{}
}

// AuthorSubnameCleared returns if the "AuthorSubname" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) AuthorSubnameCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldAuthorSubname]
	return ok
}

// ResetAuthorSubname resets all changes to the "AuthorSubname" field.
func (m *SlackMessageAttachmentMutation) ResetAuthorSubname() {
	m._AuthorSubname = nil
	delete(m.clearedFields, slackmessageattachment.FieldAuthorSubname)
}

// SetAuthorLink sets the "AuthorLink" field.
func (m *SlackMessageAttachmentMutation) SetAuthorLink(s string) {
	m._AuthorLink = &s
}

// AuthorLink returns the value of the "AuthorLink" field in the mutation.
func (m *SlackMessageAttachmentMutation) AuthorLink() (r string, exists bool) {
	v := m._AuthorLink
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorLink returns the old "AuthorLink" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldAuthorLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorLink: %w", err)
	}
	return oldValue.AuthorLink, nil
}

// ClearAuthorLink clears the value of the "AuthorLink" field.
func (m *SlackMessageAttachmentMutation) ClearAuthorLink() {
	m._AuthorLink = nil
	m.clearedFields[slackmessageattachment.FieldAuthorLink] = struct{}{}
}

// AuthorLinkCleared returns if the "AuthorLink" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) AuthorLinkCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldAuthorLink]
	return ok
}

// ResetAuthorLink resets all changes to the "AuthorLink" field.
func (m *SlackMessageAttachmentMutation) ResetAuthorLink() {
	m._AuthorLink = nil
	delete(m.clearedFields, slackmessageattachment.FieldAuthorLink)
}

// SetAuthorIcon sets the "AuthorIcon" field.
func (m *SlackMessageAttachmentMutation) SetAuthorIcon(s string) {
	m._AuthorIcon = &s
}

// AuthorIcon returns the value of the "AuthorIcon" field in the mutation.
func (m *SlackMessageAttachmentMutation) AuthorIcon() (r string, exists bool) {
	v := m._AuthorIcon
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorIcon returns the old "AuthorIcon" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldAuthorIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorIcon: %w", err)
	}
	return oldValue.AuthorIcon, nil
}

// ClearAuthorIcon clears the value of the "AuthorIcon" field.
func (m *SlackMessageAttachmentMutation) ClearAuthorIcon() {
	m._AuthorIcon = nil
	m.clearedFields[slackmessageattachment.FieldAuthorIcon] = struct{}{}
}

// AuthorIconCleared returns if the "AuthorIcon" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) AuthorIconCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldAuthorIcon]
	return ok
}

// ResetAuthorIcon resets all changes to the "AuthorIcon" field.
func (m *SlackMessageAttachmentMutation) ResetAuthorIcon() {
	m._AuthorIcon = nil
	delete(m.clearedFields, slackmessageattachment.FieldAuthorIcon)
}

// SetTitle sets the "Title" field.
func (m *SlackMessageAttachmentMutation) SetTitle(s string) {
	m._Title = &s
}

// Title returns the value of the "Title" field in the mutation.
func (m *SlackMessageAttachmentMutation) Title() (r string, exists bool) {
	v := m._Title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "Title" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "Title" field.
func (m *SlackMessageAttachmentMutation) ClearTitle() {
	m._Title = nil
	m.clearedFields[slackmessageattachment.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "Title" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) TitleCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "Title" field.
func (m *SlackMessageAttachmentMutation) ResetTitle() {
	m._Title = nil
	delete(m.clearedFields, slackmessageattachment.FieldTitle)
}

// SetTitleLink sets the "TitleLink" field.
func (m *SlackMessageAttachmentMutation) SetTitleLink(s string) {
	m._TitleLink = &s
}

// TitleLink returns the value of the "TitleLink" field in the mutation.
func (m *SlackMessageAttachmentMutation) TitleLink() (r string, exists bool) {
	v := m._TitleLink
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleLink returns the old "TitleLink" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldTitleLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleLink: %w", err)
	}
	return oldValue.TitleLink, nil
}

// ClearTitleLink clears the value of the "TitleLink" field.
func (m *SlackMessageAttachmentMutation) ClearTitleLink() {
	m._TitleLink = nil
	m.clearedFields[slackmessageattachment.FieldTitleLink] = struct{}{}
}

// TitleLinkCleared returns if the "TitleLink" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) TitleLinkCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldTitleLink]
	return ok
}

// ResetTitleLink resets all changes to the "TitleLink" field.
func (m *SlackMessageAttachmentMutation) ResetTitleLink() {
	m._TitleLink = nil
	delete(m.clearedFields, slackmessageattachment.FieldTitleLink)
}

// SetPretext sets the "Pretext" field.
func (m *SlackMessageAttachmentMutation) SetPretext(s string) {
	m._Pretext = &s
}

// Pretext returns the value of the "Pretext" field in the mutation.
func (m *SlackMessageAttachmentMutation) Pretext() (r string, exists bool) {
	v := m._Pretext
	if v == nil {
		return
	}
	return *v, true
}

// OldPretext returns the old "Pretext" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldPretext(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPretext is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPretext requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPretext: %w", err)
	}
	return oldValue.Pretext, nil
}

// ClearPretext clears the value of the "Pretext" field.
func (m *SlackMessageAttachmentMutation) ClearPretext() {
	m._Pretext = nil
	m.clearedFields[slackmessageattachment.FieldPretext] = struct{}{}
}

// PretextCleared returns if the "Pretext" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) PretextCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldPretext]
	return ok
}

// ResetPretext resets all changes to the "Pretext" field.
func (m *SlackMessageAttachmentMutation) ResetPretext() {
	m._Pretext = nil
	delete(m.clearedFields, slackmessageattachment.FieldPretext)
}

// SetText sets the "Text" field.
func (m *SlackMessageAttachmentMutation) SetText(s string) {
	m._Text = &s
}

// Text returns the value of the "Text" field in the mutation.
func (m *SlackMessageAttachmentMutation) Text() (r string, exists bool) {
	v := m._Text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "Text" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ClearText clears the value of the "Text" field.
func (m *SlackMessageAttachmentMutation) ClearText() {
	m._Text = nil
	m.clearedFields[slackmessageattachment.FieldText] = struct{}{}
}

// TextCleared returns if the "Text" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) TextCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldText]
	return ok
}

// ResetText resets all changes to the "Text" field.
func (m *SlackMessageAttachmentMutation) ResetText() {
	m._Text = nil
	delete(m.clearedFields, slackmessageattachment.FieldText)
}

// SetImageURL sets the "ImageURL" field.
func (m *SlackMessageAttachmentMutation) SetImageURL(s string) {
	m._ImageURL = &s
}

// ImageURL returns the value of the "ImageURL" field in the mutation.
func (m *SlackMessageAttachmentMutation) ImageURL() (r string, exists bool) {
	v := m._ImageURL
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "ImageURL" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ClearImageURL clears the value of the "ImageURL" field.
func (m *SlackMessageAttachmentMutation) ClearImageURL() {
	m._ImageURL = nil
	m.clearedFields[slackmessageattachment.FieldImageURL] = struct{}{}
}

// ImageURLCleared returns if the "ImageURL" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) ImageURLCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldImageURL]
	return ok
}

// ResetImageURL resets all changes to the "ImageURL" field.
func (m *SlackMessageAttachmentMutation) ResetImageURL() {
	m._ImageURL = nil
	delete(m.clearedFields, slackmessageattachment.FieldImageURL)
}

// SetThumbURL sets the "ThumbURL" field.
func (m *SlackMessageAttachmentMutation) SetThumbURL(s string) {
	m._ThumbURL = &s
}

// ThumbURL returns the value of the "ThumbURL" field in the mutation.
func (m *SlackMessageAttachmentMutation) ThumbURL() (r string, exists bool) {
	v := m._ThumbURL
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbURL returns the old "ThumbURL" field's value of the SlackMessageAttachment entity.
// If the SlackMessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SlackMessageAttachmentMutation) OldThumbURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbURL: %w", err)
	}
	return oldValue.ThumbURL, nil
}

// ClearThumbURL clears the value of the "ThumbURL" field.
func (m *SlackMessageAttachmentMutation) ClearThumbURL() {
	m._ThumbURL = nil
	m.clearedFields[slackmessageattachment.FieldThumbURL] = struct{}{}
}

// ThumbURLCleared returns if the "ThumbURL" field was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) ThumbURLCleared() bool {
	_, ok := m.clearedFields[slackmessageattachment.FieldThumbURL]
	return ok
}

// ResetThumbURL resets all changes to the "ThumbURL" field.
func (m *SlackMessageAttachmentMutation) ResetThumbURL() {
	m._ThumbURL = nil
	delete(m.clearedFields, slackmessageattachment.FieldThumbURL)
}

// SetMessageIDID sets the "message_id" edge to the SlackMessage entity by id.
func (m *SlackMessageAttachmentMutation) SetMessageIDID(id int) {
	m.message_id = &id
}

// ClearMessageID clears the "message_id" edge to the SlackMessage entity.
func (m *SlackMessageAttachmentMutation) ClearMessageID() {
	m.clearedmessage_id = true
}

// MessageIDCleared reports if the "message_id" edge to the SlackMessage entity was cleared.
func (m *SlackMessageAttachmentMutation) MessageIDCleared() bool {
	return m.clearedmessage_id
}

// MessageIDID returns the "message_id" edge ID in the mutation.
func (m *SlackMessageAttachmentMutation) MessageIDID() (id int, exists bool) {
	if m.message_id != nil {
		return *m.message_id, true
	}
	return
}

// MessageIDIDs returns the "message_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageIDID instead. It exists only for internal usage by the builders.
func (m *SlackMessageAttachmentMutation) MessageIDIDs() (ids []int) {
	if id := m.message_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessageID resets all changes to the "message_id" edge.
func (m *SlackMessageAttachmentMutation) ResetMessageID() {
	m.message_id = nil
	m.clearedmessage_id = false
}

// Where appends a list predicates to the SlackMessageAttachmentMutation builder.
func (m *SlackMessageAttachmentMutation) Where(ps ...predicate.SlackMessageAttachment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SlackMessageAttachmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SlackMessageAttachmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SlackMessageAttachment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SlackMessageAttachmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SlackMessageAttachmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SlackMessageAttachment).
func (m *SlackMessageAttachmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SlackMessageAttachmentMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m._Color != nil {
		fields = append(fields, slackmessageattachment.FieldColor)
	}
	if m._Fallback != nil {
		fields = append(fields, slackmessageattachment.FieldFallback)
	}
	if m._CallbackID != nil {
		fields = append(fields, slackmessageattachment.FieldCallbackID)
	}
	if m._AuthorID != nil {
		fields = append(fields, slackmessageattachment.FieldAuthorID)
	}
	if m._AuthorName != nil {
		fields = append(fields, slackmessageattachment.FieldAuthorName)
	}
	if m._AuthorSubname != nil {
		fields = append(fields, slackmessageattachment.FieldAuthorSubname)
	}
	if m._AuthorLink != nil {
		fields = append(fields, slackmessageattachment.FieldAuthorLink)
	}
	if m._AuthorIcon != nil {
		fields = append(fields, slackmessageattachment.FieldAuthorIcon)
	}
	if m._Title != nil {
		fields = append(fields, slackmessageattachment.FieldTitle)
	}
	if m._TitleLink != nil {
		fields = append(fields, slackmessageattachment.FieldTitleLink)
	}
	if m._Pretext != nil {
		fields = append(fields, slackmessageattachment.FieldPretext)
	}
	if m._Text != nil {
		fields = append(fields, slackmessageattachment.FieldText)
	}
	if m._ImageURL != nil {
		fields = append(fields, slackmessageattachment.FieldImageURL)
	}
	if m._ThumbURL != nil {
		fields = append(fields, slackmessageattachment.FieldThumbURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SlackMessageAttachmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case slackmessageattachment.FieldColor:
		return m.Color()
	case slackmessageattachment.FieldFallback:
		return m.Fallback()
	case slackmessageattachment.FieldCallbackID:
		return m.CallbackID()
	case slackmessageattachment.FieldAuthorID:
		return m.AuthorID()
	case slackmessageattachment.FieldAuthorName:
		return m.AuthorName()
	case slackmessageattachment.FieldAuthorSubname:
		return m.AuthorSubname()
	case slackmessageattachment.FieldAuthorLink:
		return m.AuthorLink()
	case slackmessageattachment.FieldAuthorIcon:
		return m.AuthorIcon()
	case slackmessageattachment.FieldTitle:
		return m.Title()
	case slackmessageattachment.FieldTitleLink:
		return m.TitleLink()
	case slackmessageattachment.FieldPretext:
		return m.Pretext()
	case slackmessageattachment.FieldText:
		return m.Text()
	case slackmessageattachment.FieldImageURL:
		return m.ImageURL()
	case slackmessageattachment.FieldThumbURL:
		return m.ThumbURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SlackMessageAttachmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case slackmessageattachment.FieldColor:
		return m.OldColor(ctx)
	case slackmessageattachment.FieldFallback:
		return m.OldFallback(ctx)
	case slackmessageattachment.FieldCallbackID:
		return m.OldCallbackID(ctx)
	case slackmessageattachment.FieldAuthorID:
		return m.OldAuthorID(ctx)
	case slackmessageattachment.FieldAuthorName:
		return m.OldAuthorName(ctx)
	case slackmessageattachment.FieldAuthorSubname:
		return m.OldAuthorSubname(ctx)
	case slackmessageattachment.FieldAuthorLink:
		return m.OldAuthorLink(ctx)
	case slackmessageattachment.FieldAuthorIcon:
		return m.OldAuthorIcon(ctx)
	case slackmessageattachment.FieldTitle:
		return m.OldTitle(ctx)
	case slackmessageattachment.FieldTitleLink:
		return m.OldTitleLink(ctx)
	case slackmessageattachment.FieldPretext:
		return m.OldPretext(ctx)
	case slackmessageattachment.FieldText:
		return m.OldText(ctx)
	case slackmessageattachment.FieldImageURL:
		return m.OldImageURL(ctx)
	case slackmessageattachment.FieldThumbURL:
		return m.OldThumbURL(ctx)
	}
	return nil, fmt.Errorf("unknown SlackMessageAttachment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SlackMessageAttachmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case slackmessageattachment.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case slackmessageattachment.FieldFallback:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFallback(v)
		return nil
	case slackmessageattachment.FieldCallbackID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCallbackID(v)
		return nil
	case slackmessageattachment.FieldAuthorID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorID(v)
		return nil
	case slackmessageattachment.FieldAuthorName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorName(v)
		return nil
	case slackmessageattachment.FieldAuthorSubname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorSubname(v)
		return nil
	case slackmessageattachment.FieldAuthorLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorLink(v)
		return nil
	case slackmessageattachment.FieldAuthorIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorIcon(v)
		return nil
	case slackmessageattachment.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case slackmessageattachment.FieldTitleLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleLink(v)
		return nil
	case slackmessageattachment.FieldPretext:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPretext(v)
		return nil
	case slackmessageattachment.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case slackmessageattachment.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case slackmessageattachment.FieldThumbURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbURL(v)
		return nil
	}
	return fmt.Errorf("unknown SlackMessageAttachment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SlackMessageAttachmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SlackMessageAttachmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SlackMessageAttachmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SlackMessageAttachment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SlackMessageAttachmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(slackmessageattachment.FieldColor) {
		fields = append(fields, slackmessageattachment.FieldColor)
	}
	if m.FieldCleared(slackmessageattachment.FieldFallback) {
		fields = append(fields, slackmessageattachment.FieldFallback)
	}
	if m.FieldCleared(slackmessageattachment.FieldCallbackID) {
		fields = append(fields, slackmessageattachment.FieldCallbackID)
	}
	if m.FieldCleared(slackmessageattachment.FieldAuthorID) {
		fields = append(fields, slackmessageattachment.FieldAuthorID)
	}
	if m.FieldCleared(slackmessageattachment.FieldAuthorName) {
		fields = append(fields, slackmessageattachment.FieldAuthorName)
	}
	if m.FieldCleared(slackmessageattachment.FieldAuthorSubname) {
		fields = append(fields, slackmessageattachment.FieldAuthorSubname)
	}
	if m.FieldCleared(slackmessageattachment.FieldAuthorLink) {
		fields = append(fields, slackmessageattachment.FieldAuthorLink)
	}
	if m.FieldCleared(slackmessageattachment.FieldAuthorIcon) {
		fields = append(fields, slackmessageattachment.FieldAuthorIcon)
	}
	if m.FieldCleared(slackmessageattachment.FieldTitle) {
		fields = append(fields, slackmessageattachment.FieldTitle)
	}
	if m.FieldCleared(slackmessageattachment.FieldTitleLink) {
		fields = append(fields, slackmessageattachment.FieldTitleLink)
	}
	if m.FieldCleared(slackmessageattachment.FieldPretext) {
		fields = append(fields, slackmessageattachment.FieldPretext)
	}
	if m.FieldCleared(slackmessageattachment.FieldText) {
		fields = append(fields, slackmessageattachment.FieldText)
	}
	if m.FieldCleared(slackmessageattachment.FieldImageURL) {
		fields = append(fields, slackmessageattachment.FieldImageURL)
	}
	if m.FieldCleared(slackmessageattachment.FieldThumbURL) {
		fields = append(fields, slackmessageattachment.FieldThumbURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SlackMessageAttachmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SlackMessageAttachmentMutation) ClearField(name string) error {
	switch name {
	case slackmessageattachment.FieldColor:
		m.ClearColor()
		return nil
	case slackmessageattachment.FieldFallback:
		m.ClearFallback()
		return nil
	case slackmessageattachment.FieldCallbackID:
		m.ClearCallbackID()
		return nil
	case slackmessageattachment.FieldAuthorID:
		m.ClearAuthorID()
		return nil
	case slackmessageattachment.FieldAuthorName:
		m.ClearAuthorName()
		return nil
	case slackmessageattachment.FieldAuthorSubname:
		m.ClearAuthorSubname()
		return nil
	case slackmessageattachment.FieldAuthorLink:
		m.ClearAuthorLink()
		return nil
	case slackmessageattachment.FieldAuthorIcon:
		m.ClearAuthorIcon()
		return nil
	case slackmessageattachment.FieldTitle:
		m.ClearTitle()
		return nil
	case slackmessageattachment.FieldTitleLink:
		m.ClearTitleLink()
		return nil
	case slackmessageattachment.FieldPretext:
		m.ClearPretext()
		return nil
	case slackmessageattachment.FieldText:
		m.ClearText()
		return nil
	case slackmessageattachment.FieldImageURL:
		m.ClearImageURL()
		return nil
	case slackmessageattachment.FieldThumbURL:
		m.ClearThumbURL()
		return nil
	}
	return fmt.Errorf("unknown SlackMessageAttachment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SlackMessageAttachmentMutation) ResetField(name string) error {
	switch name {
	case slackmessageattachment.FieldColor:
		m.ResetColor()
		return nil
	case slackmessageattachment.FieldFallback:
		m.ResetFallback()
		return nil
	case slackmessageattachment.FieldCallbackID:
		m.ResetCallbackID()
		return nil
	case slackmessageattachment.FieldAuthorID:
		m.ResetAuthorID()
		return nil
	case slackmessageattachment.FieldAuthorName:
		m.ResetAuthorName()
		return nil
	case slackmessageattachment.FieldAuthorSubname:
		m.ResetAuthorSubname()
		return nil
	case slackmessageattachment.FieldAuthorLink:
		m.ResetAuthorLink()
		return nil
	case slackmessageattachment.FieldAuthorIcon:
		m.ResetAuthorIcon()
		return nil
	case slackmessageattachment.FieldTitle:
		m.ResetTitle()
		return nil
	case slackmessageattachment.FieldTitleLink:
		m.ResetTitleLink()
		return nil
	case slackmessageattachment.FieldPretext:
		m.ResetPretext()
		return nil
	case slackmessageattachment.FieldText:
		m.ResetText()
		return nil
	case slackmessageattachment.FieldImageURL:
		m.ResetImageURL()
		return nil
	case slackmessageattachment.FieldThumbURL:
		m.ResetThumbURL()
		return nil
	}
	return fmt.Errorf("unknown SlackMessageAttachment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SlackMessageAttachmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.message_id != nil {
		edges = append(edges, slackmessageattachment.EdgeMessageID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SlackMessageAttachmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case slackmessageattachment.EdgeMessageID:
		if id := m.message_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SlackMessageAttachmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SlackMessageAttachmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SlackMessageAttachmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmessage_id {
		edges = append(edges, slackmessageattachment.EdgeMessageID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SlackMessageAttachmentMutation) EdgeCleared(name string) bool {
	switch name {
	case slackmessageattachment.EdgeMessageID:
		return m.clearedmessage_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SlackMessageAttachmentMutation) ClearEdge(name string) error {
	switch name {
	case slackmessageattachment.EdgeMessageID:
		m.ClearMessageID()
		return nil
	}
	return fmt.Errorf("unknown SlackMessageAttachment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SlackMessageAttachmentMutation) ResetEdge(name string) error {
	switch name {
	case slackmessageattachment.EdgeMessageID:
		m.ResetMessageID()
		return nil
	}
	return fmt.Errorf("unknown SlackMessageAttachment edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_UserId             *uuid.UUID
	_Email              *string
	_Password           *string
	_CreatedAt          *time.Time
	_UpdatedAt          *time.Time
	clearedFields       map[string]struct{}
	applications        map[int]struct{}
	removedapplications map[int]struct{}
	clearedapplications bool
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserId sets the "UserId" field.
func (m *UserMutation) SetUserId(u uuid.UUID) {
	m._UserId = &u
}

// UserId returns the value of the "UserId" field in the mutation.
func (m *UserMutation) UserId() (r uuid.UUID, exists bool) {
	v := m._UserId
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old "UserId" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserId(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// ResetUserId resets all changes to the "UserId" field.
func (m *UserMutation) ResetUserId() {
	m._UserId = nil
}

// SetEmail sets the "Email" field.
func (m *UserMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the value of the "Email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "Email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "Email" field.
func (m *UserMutation) ResetEmail() {
	m._Email = nil
}

// SetPassword sets the "Password" field.
func (m *UserMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the value of the "Password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "Password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "Password" field.
func (m *UserMutation) ResetPassword() {
	m._Password = nil
}

// SetCreatedAt sets the "CreatedAt" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m._CreatedAt = &t
}

// CreatedAt returns the value of the "CreatedAt" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m._CreatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "CreatedAt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "CreatedAt" field.
func (m *UserMutation) ResetCreatedAt() {
	m._CreatedAt = nil
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m._UpdatedAt = &t
}

// UpdatedAt returns the value of the "UpdatedAt" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m._UpdatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "UpdatedAt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "UpdatedAt" field.
func (m *UserMutation) ResetUpdatedAt() {
	m._UpdatedAt = nil
}

// AddApplicationIDs adds the "applications" edge to the Application entity by ids.
func (m *UserMutation) AddApplicationIDs(ids ...int) {
	if m.applications == nil {
		m.applications = make(map[int]struct{})
	}
	for i := range ids {
		m.applications[ids[i]] = struct{}{}
	}
}

// ClearApplications clears the "applications" edge to the Application entity.
func (m *UserMutation) ClearApplications() {
	m.clearedapplications = true
}

// ApplicationsCleared reports if the "applications" edge to the Application entity was cleared.
func (m *UserMutation) ApplicationsCleared() bool {
	return m.clearedapplications
}

// RemoveApplicationIDs removes the "applications" edge to the Application entity by IDs.
func (m *UserMutation) RemoveApplicationIDs(ids ...int) {
	if m.removedapplications == nil {
		m.removedapplications = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.applications, ids[i])
		m.removedapplications[ids[i]] = struct{}{}
	}
}

// RemovedApplications returns the removed IDs of the "applications" edge to the Application entity.
func (m *UserMutation) RemovedApplicationsIDs() (ids []int) {
	for id := range m.removedapplications {
		ids = append(ids, id)
	}
	return
}

// ApplicationsIDs returns the "applications" edge IDs in the mutation.
func (m *UserMutation) ApplicationsIDs() (ids []int) {
	for id := range m.applications {
		ids = append(ids, id)
	}
	return
}

// ResetApplications resets all changes to the "applications" edge.
func (m *UserMutation) ResetApplications() {
	m.applications = nil
	m.clearedapplications = false
	m.removedapplications = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._UserId != nil {
		fields = append(fields, user.FieldUserId)
	}
	if m._Email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m._Password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m._CreatedAt != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m._UpdatedAt != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserId:
		return m.UserId()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserId:
		return m.OldUserId(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserId:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserId:
		m.ResetUserId()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.applications != nil {
		edges = append(edges, user.EdgeApplications)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeApplications:
		ids := make([]ent.Value, 0, len(m.applications))
		for id := range m.applications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedapplications != nil {
		edges = append(edges, user.EdgeApplications)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeApplications:
		ids := make([]ent.Value, 0, len(m.removedapplications))
		for id := range m.removedapplications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedapplications {
		edges = append(edges, user.EdgeApplications)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeApplications:
		return m.clearedapplications
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeApplications:
		m.ResetApplications()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
