// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/echo-stream/database/ent/slackmessage"
	"github.com/echo-stream/database/ent/slackmessageattachment"
)

// SlackMessageAttachmentCreate is the builder for creating a SlackMessageAttachment entity.
type SlackMessageAttachmentCreate struct {
	config
	mutation *SlackMessageAttachmentMutation
	hooks    []Hook
}

// SetColor sets the "Color" field.
func (smac *SlackMessageAttachmentCreate) SetColor(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetColor(s)
	return smac
}

// SetNillableColor sets the "Color" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableColor(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetColor(*s)
	}
	return smac
}

// SetFallback sets the "Fallback" field.
func (smac *SlackMessageAttachmentCreate) SetFallback(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetFallback(s)
	return smac
}

// SetNillableFallback sets the "Fallback" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableFallback(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetFallback(*s)
	}
	return smac
}

// SetCallbackID sets the "CallbackID" field.
func (smac *SlackMessageAttachmentCreate) SetCallbackID(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetCallbackID(s)
	return smac
}

// SetNillableCallbackID sets the "CallbackID" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableCallbackID(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetCallbackID(*s)
	}
	return smac
}

// SetAuthorID sets the "AuthorID" field.
func (smac *SlackMessageAttachmentCreate) SetAuthorID(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetAuthorID(s)
	return smac
}

// SetNillableAuthorID sets the "AuthorID" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableAuthorID(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetAuthorID(*s)
	}
	return smac
}

// SetAuthorName sets the "AuthorName" field.
func (smac *SlackMessageAttachmentCreate) SetAuthorName(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetAuthorName(s)
	return smac
}

// SetNillableAuthorName sets the "AuthorName" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableAuthorName(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetAuthorName(*s)
	}
	return smac
}

// SetAuthorSubname sets the "AuthorSubname" field.
func (smac *SlackMessageAttachmentCreate) SetAuthorSubname(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetAuthorSubname(s)
	return smac
}

// SetNillableAuthorSubname sets the "AuthorSubname" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableAuthorSubname(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetAuthorSubname(*s)
	}
	return smac
}

// SetAuthorLink sets the "AuthorLink" field.
func (smac *SlackMessageAttachmentCreate) SetAuthorLink(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetAuthorLink(s)
	return smac
}

// SetNillableAuthorLink sets the "AuthorLink" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableAuthorLink(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetAuthorLink(*s)
	}
	return smac
}

// SetAuthorIcon sets the "AuthorIcon" field.
func (smac *SlackMessageAttachmentCreate) SetAuthorIcon(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetAuthorIcon(s)
	return smac
}

// SetNillableAuthorIcon sets the "AuthorIcon" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableAuthorIcon(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetAuthorIcon(*s)
	}
	return smac
}

// SetTitle sets the "Title" field.
func (smac *SlackMessageAttachmentCreate) SetTitle(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetTitle(s)
	return smac
}

// SetNillableTitle sets the "Title" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableTitle(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetTitle(*s)
	}
	return smac
}

// SetTitleLink sets the "TitleLink" field.
func (smac *SlackMessageAttachmentCreate) SetTitleLink(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetTitleLink(s)
	return smac
}

// SetNillableTitleLink sets the "TitleLink" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableTitleLink(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetTitleLink(*s)
	}
	return smac
}

// SetPretext sets the "Pretext" field.
func (smac *SlackMessageAttachmentCreate) SetPretext(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetPretext(s)
	return smac
}

// SetNillablePretext sets the "Pretext" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillablePretext(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetPretext(*s)
	}
	return smac
}

// SetText sets the "Text" field.
func (smac *SlackMessageAttachmentCreate) SetText(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetText(s)
	return smac
}

// SetNillableText sets the "Text" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableText(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetText(*s)
	}
	return smac
}

// SetImageURL sets the "ImageURL" field.
func (smac *SlackMessageAttachmentCreate) SetImageURL(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetImageURL(s)
	return smac
}

// SetNillableImageURL sets the "ImageURL" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableImageURL(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetImageURL(*s)
	}
	return smac
}

// SetThumbURL sets the "ThumbURL" field.
func (smac *SlackMessageAttachmentCreate) SetThumbURL(s string) *SlackMessageAttachmentCreate {
	smac.mutation.SetThumbURL(s)
	return smac
}

// SetNillableThumbURL sets the "ThumbURL" field if the given value is not nil.
func (smac *SlackMessageAttachmentCreate) SetNillableThumbURL(s *string) *SlackMessageAttachmentCreate {
	if s != nil {
		smac.SetThumbURL(*s)
	}
	return smac
}

// SetMessageIDID sets the "message_id" edge to the SlackMessage entity by ID.
func (smac *SlackMessageAttachmentCreate) SetMessageIDID(id int) *SlackMessageAttachmentCreate {
	smac.mutation.SetMessageIDID(id)
	return smac
}

// SetMessageID sets the "message_id" edge to the SlackMessage entity.
func (smac *SlackMessageAttachmentCreate) SetMessageID(s *SlackMessage) *SlackMessageAttachmentCreate {
	return smac.SetMessageIDID(s.ID)
}

// Mutation returns the SlackMessageAttachmentMutation object of the builder.
func (smac *SlackMessageAttachmentCreate) Mutation() *SlackMessageAttachmentMutation {
	return smac.mutation
}

// Save creates the SlackMessageAttachment in the database.
func (smac *SlackMessageAttachmentCreate) Save(ctx context.Context) (*SlackMessageAttachment, error) {
	return withHooks(ctx, smac.sqlSave, smac.mutation, smac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smac *SlackMessageAttachmentCreate) SaveX(ctx context.Context) *SlackMessageAttachment {
	v, err := smac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smac *SlackMessageAttachmentCreate) Exec(ctx context.Context) error {
	_, err := smac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smac *SlackMessageAttachmentCreate) ExecX(ctx context.Context) {
	if err := smac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smac *SlackMessageAttachmentCreate) check() error {
	if _, ok := smac.mutation.MessageIDID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`ent: missing required edge "SlackMessageAttachment.message_id"`)}
	}
	return nil
}

func (smac *SlackMessageAttachmentCreate) sqlSave(ctx context.Context) (*SlackMessageAttachment, error) {
	if err := smac.check(); err != nil {
		return nil, err
	}
	_node, _spec := smac.createSpec()
	if err := sqlgraph.CreateNode(ctx, smac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	smac.mutation.id = &_node.ID
	smac.mutation.done = true
	return _node, nil
}

func (smac *SlackMessageAttachmentCreate) createSpec() (*SlackMessageAttachment, *sqlgraph.CreateSpec) {
	var (
		_node = &SlackMessageAttachment{config: smac.config}
		_spec = sqlgraph.NewCreateSpec(slackmessageattachment.Table, sqlgraph.NewFieldSpec(slackmessageattachment.FieldID, field.TypeInt))
	)
	if value, ok := smac.mutation.Color(); ok {
		_spec.SetField(slackmessageattachment.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := smac.mutation.Fallback(); ok {
		_spec.SetField(slackmessageattachment.FieldFallback, field.TypeString, value)
		_node.Fallback = value
	}
	if value, ok := smac.mutation.CallbackID(); ok {
		_spec.SetField(slackmessageattachment.FieldCallbackID, field.TypeString, value)
		_node.CallbackID = value
	}
	if value, ok := smac.mutation.AuthorID(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorID, field.TypeString, value)
		_node.AuthorID = value
	}
	if value, ok := smac.mutation.AuthorName(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorName, field.TypeString, value)
		_node.AuthorName = value
	}
	if value, ok := smac.mutation.AuthorSubname(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorSubname, field.TypeString, value)
		_node.AuthorSubname = value
	}
	if value, ok := smac.mutation.AuthorLink(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorLink, field.TypeString, value)
		_node.AuthorLink = value
	}
	if value, ok := smac.mutation.AuthorIcon(); ok {
		_spec.SetField(slackmessageattachment.FieldAuthorIcon, field.TypeString, value)
		_node.AuthorIcon = value
	}
	if value, ok := smac.mutation.Title(); ok {
		_spec.SetField(slackmessageattachment.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := smac.mutation.TitleLink(); ok {
		_spec.SetField(slackmessageattachment.FieldTitleLink, field.TypeString, value)
		_node.TitleLink = value
	}
	if value, ok := smac.mutation.Pretext(); ok {
		_spec.SetField(slackmessageattachment.FieldPretext, field.TypeString, value)
		_node.Pretext = value
	}
	if value, ok := smac.mutation.Text(); ok {
		_spec.SetField(slackmessageattachment.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := smac.mutation.ImageURL(); ok {
		_spec.SetField(slackmessageattachment.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := smac.mutation.ThumbURL(); ok {
		_spec.SetField(slackmessageattachment.FieldThumbURL, field.TypeString, value)
		_node.ThumbURL = value
	}
	if nodes := smac.mutation.MessageIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   slackmessageattachment.MessageIDTable,
			Columns: []string{slackmessageattachment.MessageIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(slackmessage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.message_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SlackMessageAttachmentCreateBulk is the builder for creating many SlackMessageAttachment entities in bulk.
type SlackMessageAttachmentCreateBulk struct {
	config
	err      error
	builders []*SlackMessageAttachmentCreate
}

// Save creates the SlackMessageAttachment entities in the database.
func (smacb *SlackMessageAttachmentCreateBulk) Save(ctx context.Context) ([]*SlackMessageAttachment, error) {
	if smacb.err != nil {
		return nil, smacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(smacb.builders))
	nodes := make([]*SlackMessageAttachment, len(smacb.builders))
	mutators := make([]Mutator, len(smacb.builders))
	for i := range smacb.builders {
		func(i int, root context.Context) {
			builder := smacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SlackMessageAttachmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smacb *SlackMessageAttachmentCreateBulk) SaveX(ctx context.Context) []*SlackMessageAttachment {
	v, err := smacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smacb *SlackMessageAttachmentCreateBulk) Exec(ctx context.Context) error {
	_, err := smacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smacb *SlackMessageAttachmentCreateBulk) ExecX(ctx context.Context) {
	if err := smacb.Exec(ctx); err != nil {
		panic(err)
	}
}
