// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/echo-stream/database/ent/slackmessage"
	"github.com/google/uuid"
)

// SlackMessage is the model entity for the SlackMessage schema.
type SlackMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ApplicationId holds the value of the "ApplicationId" field.
	ApplicationId uuid.UUID `json:"ApplicationId,omitempty"`
	// UserName holds the value of the "UserName" field.
	UserName string `json:"UserName,omitempty"`
	// IconEmoji holds the value of the "IconEmoji" field.
	IconEmoji string `json:"IconEmoji,omitempty"`
	// Channel holds the value of the "Channel" field.
	Channel string `json:"Channel,omitempty"`
	// Text holds the value of the "Text" field.
	Text string `json:"Text,omitempty"`
	// ThreadTs holds the value of the "ThreadTs" field.
	ThreadTs string `json:"ThreadTs,omitempty"`
	// State holds the value of the "State" field.
	State string `json:"State,omitempty"`
	// RetryCount holds the value of the "RetryCount" field.
	RetryCount int16 `json:"RetryCount,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SlackMessageQuery when eager-loading is set.
	Edges        SlackMessageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SlackMessageEdges holds the relations/edges for other nodes in the graph.
type SlackMessageEdges struct {
	// SlackMessageAttachments holds the value of the slack_message_attachments edge.
	SlackMessageAttachments []*SlackMessageAttachment `json:"slack_message_attachments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SlackMessageAttachmentsOrErr returns the SlackMessageAttachments value or an error if the edge
// was not loaded in eager-loading.
func (e SlackMessageEdges) SlackMessageAttachmentsOrErr() ([]*SlackMessageAttachment, error) {
	if e.loadedTypes[0] {
		return e.SlackMessageAttachments, nil
	}
	return nil, &NotLoadedError{edge: "slack_message_attachments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SlackMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case slackmessage.FieldID, slackmessage.FieldRetryCount:
			values[i] = new(sql.NullInt64)
		case slackmessage.FieldUserName, slackmessage.FieldIconEmoji, slackmessage.FieldChannel, slackmessage.FieldText, slackmessage.FieldThreadTs, slackmessage.FieldState:
			values[i] = new(sql.NullString)
		case slackmessage.FieldCreatedAt, slackmessage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case slackmessage.FieldApplicationId:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SlackMessage fields.
func (sm *SlackMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case slackmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int(value.Int64)
		case slackmessage.FieldApplicationId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ApplicationId", values[i])
			} else if value != nil {
				sm.ApplicationId = *value
			}
		case slackmessage.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserName", values[i])
			} else if value.Valid {
				sm.UserName = value.String
			}
		case slackmessage.FieldIconEmoji:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field IconEmoji", values[i])
			} else if value.Valid {
				sm.IconEmoji = value.String
			}
		case slackmessage.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Channel", values[i])
			} else if value.Valid {
				sm.Channel = value.String
			}
		case slackmessage.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Text", values[i])
			} else if value.Valid {
				sm.Text = value.String
			}
		case slackmessage.FieldThreadTs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ThreadTs", values[i])
			} else if value.Valid {
				sm.ThreadTs = value.String
			}
		case slackmessage.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field State", values[i])
			} else if value.Valid {
				sm.State = value.String
			}
		case slackmessage.FieldRetryCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RetryCount", values[i])
			} else if value.Valid {
				sm.RetryCount = int16(value.Int64)
			}
		case slackmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				sm.CreatedAt = value.Time
			}
		case slackmessage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				sm.UpdatedAt = value.Time
			}
		default:
			sm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SlackMessage.
// This includes values selected through modifiers, order, etc.
func (sm *SlackMessage) Value(name string) (ent.Value, error) {
	return sm.selectValues.Get(name)
}

// QuerySlackMessageAttachments queries the "slack_message_attachments" edge of the SlackMessage entity.
func (sm *SlackMessage) QuerySlackMessageAttachments() *SlackMessageAttachmentQuery {
	return NewSlackMessageClient(sm.config).QuerySlackMessageAttachments(sm)
}

// Update returns a builder for updating this SlackMessage.
// Note that you need to call SlackMessage.Unwrap() before calling this method if this SlackMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *SlackMessage) Update() *SlackMessageUpdateOne {
	return NewSlackMessageClient(sm.config).UpdateOne(sm)
}

// Unwrap unwraps the SlackMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *SlackMessage) Unwrap() *SlackMessage {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: SlackMessage is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *SlackMessage) String() string {
	var builder strings.Builder
	builder.WriteString("SlackMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sm.ID))
	builder.WriteString("ApplicationId=")
	builder.WriteString(fmt.Sprintf("%v", sm.ApplicationId))
	builder.WriteString(", ")
	builder.WriteString("UserName=")
	builder.WriteString(sm.UserName)
	builder.WriteString(", ")
	builder.WriteString("IconEmoji=")
	builder.WriteString(sm.IconEmoji)
	builder.WriteString(", ")
	builder.WriteString("Channel=")
	builder.WriteString(sm.Channel)
	builder.WriteString(", ")
	builder.WriteString("Text=")
	builder.WriteString(sm.Text)
	builder.WriteString(", ")
	builder.WriteString("ThreadTs=")
	builder.WriteString(sm.ThreadTs)
	builder.WriteString(", ")
	builder.WriteString("State=")
	builder.WriteString(sm.State)
	builder.WriteString(", ")
	builder.WriteString("RetryCount=")
	builder.WriteString(fmt.Sprintf("%v", sm.RetryCount))
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(sm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(sm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SlackMessages is a parsable slice of SlackMessage.
type SlackMessages []*SlackMessage
