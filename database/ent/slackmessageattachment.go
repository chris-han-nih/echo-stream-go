// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/echo-stream/database/ent/slackmessage"
	"github.com/echo-stream/database/ent/slackmessageattachment"
)

// SlackMessageAttachment is the model entity for the SlackMessageAttachment schema.
type SlackMessageAttachment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Color holds the value of the "Color" field.
	Color string `json:"Color,omitempty"`
	// Fallback holds the value of the "Fallback" field.
	Fallback string `json:"Fallback,omitempty"`
	// CallbackID holds the value of the "CallbackID" field.
	CallbackID string `json:"CallbackID,omitempty"`
	// AuthorID holds the value of the "AuthorID" field.
	AuthorID string `json:"AuthorID,omitempty"`
	// AuthorName holds the value of the "AuthorName" field.
	AuthorName string `json:"AuthorName,omitempty"`
	// AuthorSubname holds the value of the "AuthorSubname" field.
	AuthorSubname string `json:"AuthorSubname,omitempty"`
	// AuthorLink holds the value of the "AuthorLink" field.
	AuthorLink string `json:"AuthorLink,omitempty"`
	// AuthorIcon holds the value of the "AuthorIcon" field.
	AuthorIcon string `json:"AuthorIcon,omitempty"`
	// Title holds the value of the "Title" field.
	Title string `json:"Title,omitempty"`
	// TitleLink holds the value of the "TitleLink" field.
	TitleLink string `json:"TitleLink,omitempty"`
	// Pretext holds the value of the "Pretext" field.
	Pretext string `json:"Pretext,omitempty"`
	// Text holds the value of the "Text" field.
	Text string `json:"Text,omitempty"`
	// ImageURL holds the value of the "ImageURL" field.
	ImageURL string `json:"ImageURL,omitempty"`
	// ThumbURL holds the value of the "ThumbURL" field.
	ThumbURL string `json:"ThumbURL,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SlackMessageAttachmentQuery when eager-loading is set.
	Edges        SlackMessageAttachmentEdges `json:"edges"`
	message_id   *int
	selectValues sql.SelectValues
}

// SlackMessageAttachmentEdges holds the relations/edges for other nodes in the graph.
type SlackMessageAttachmentEdges struct {
	// MessageID holds the value of the message_id edge.
	MessageID *SlackMessage `json:"message_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MessageIDOrErr returns the MessageID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SlackMessageAttachmentEdges) MessageIDOrErr() (*SlackMessage, error) {
	if e.loadedTypes[0] {
		if e.MessageID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: slackmessage.Label}
		}
		return e.MessageID, nil
	}
	return nil, &NotLoadedError{edge: "message_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SlackMessageAttachment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case slackmessageattachment.FieldID:
			values[i] = new(sql.NullInt64)
		case slackmessageattachment.FieldColor, slackmessageattachment.FieldFallback, slackmessageattachment.FieldCallbackID, slackmessageattachment.FieldAuthorID, slackmessageattachment.FieldAuthorName, slackmessageattachment.FieldAuthorSubname, slackmessageattachment.FieldAuthorLink, slackmessageattachment.FieldAuthorIcon, slackmessageattachment.FieldTitle, slackmessageattachment.FieldTitleLink, slackmessageattachment.FieldPretext, slackmessageattachment.FieldText, slackmessageattachment.FieldImageURL, slackmessageattachment.FieldThumbURL:
			values[i] = new(sql.NullString)
		case slackmessageattachment.ForeignKeys[0]: // message_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SlackMessageAttachment fields.
func (sma *SlackMessageAttachment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case slackmessageattachment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sma.ID = int(value.Int64)
		case slackmessageattachment.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Color", values[i])
			} else if value.Valid {
				sma.Color = value.String
			}
		case slackmessageattachment.FieldFallback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Fallback", values[i])
			} else if value.Valid {
				sma.Fallback = value.String
			}
		case slackmessageattachment.FieldCallbackID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CallbackID", values[i])
			} else if value.Valid {
				sma.CallbackID = value.String
			}
		case slackmessageattachment.FieldAuthorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AuthorID", values[i])
			} else if value.Valid {
				sma.AuthorID = value.String
			}
		case slackmessageattachment.FieldAuthorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AuthorName", values[i])
			} else if value.Valid {
				sma.AuthorName = value.String
			}
		case slackmessageattachment.FieldAuthorSubname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AuthorSubname", values[i])
			} else if value.Valid {
				sma.AuthorSubname = value.String
			}
		case slackmessageattachment.FieldAuthorLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AuthorLink", values[i])
			} else if value.Valid {
				sma.AuthorLink = value.String
			}
		case slackmessageattachment.FieldAuthorIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AuthorIcon", values[i])
			} else if value.Valid {
				sma.AuthorIcon = value.String
			}
		case slackmessageattachment.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Title", values[i])
			} else if value.Valid {
				sma.Title = value.String
			}
		case slackmessageattachment.FieldTitleLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TitleLink", values[i])
			} else if value.Valid {
				sma.TitleLink = value.String
			}
		case slackmessageattachment.FieldPretext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Pretext", values[i])
			} else if value.Valid {
				sma.Pretext = value.String
			}
		case slackmessageattachment.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Text", values[i])
			} else if value.Valid {
				sma.Text = value.String
			}
		case slackmessageattachment.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ImageURL", values[i])
			} else if value.Valid {
				sma.ImageURL = value.String
			}
		case slackmessageattachment.FieldThumbURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ThumbURL", values[i])
			} else if value.Valid {
				sma.ThumbURL = value.String
			}
		case slackmessageattachment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field message_id", value)
			} else if value.Valid {
				sma.message_id = new(int)
				*sma.message_id = int(value.Int64)
			}
		default:
			sma.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SlackMessageAttachment.
// This includes values selected through modifiers, order, etc.
func (sma *SlackMessageAttachment) Value(name string) (ent.Value, error) {
	return sma.selectValues.Get(name)
}

// QueryMessageID queries the "message_id" edge of the SlackMessageAttachment entity.
func (sma *SlackMessageAttachment) QueryMessageID() *SlackMessageQuery {
	return NewSlackMessageAttachmentClient(sma.config).QueryMessageID(sma)
}

// Update returns a builder for updating this SlackMessageAttachment.
// Note that you need to call SlackMessageAttachment.Unwrap() before calling this method if this SlackMessageAttachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (sma *SlackMessageAttachment) Update() *SlackMessageAttachmentUpdateOne {
	return NewSlackMessageAttachmentClient(sma.config).UpdateOne(sma)
}

// Unwrap unwraps the SlackMessageAttachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sma *SlackMessageAttachment) Unwrap() *SlackMessageAttachment {
	_tx, ok := sma.config.driver.(*txDriver)
	if !ok {
		panic("ent: SlackMessageAttachment is not a transactional entity")
	}
	sma.config.driver = _tx.drv
	return sma
}

// String implements the fmt.Stringer.
func (sma *SlackMessageAttachment) String() string {
	var builder strings.Builder
	builder.WriteString("SlackMessageAttachment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sma.ID))
	builder.WriteString("Color=")
	builder.WriteString(sma.Color)
	builder.WriteString(", ")
	builder.WriteString("Fallback=")
	builder.WriteString(sma.Fallback)
	builder.WriteString(", ")
	builder.WriteString("CallbackID=")
	builder.WriteString(sma.CallbackID)
	builder.WriteString(", ")
	builder.WriteString("AuthorID=")
	builder.WriteString(sma.AuthorID)
	builder.WriteString(", ")
	builder.WriteString("AuthorName=")
	builder.WriteString(sma.AuthorName)
	builder.WriteString(", ")
	builder.WriteString("AuthorSubname=")
	builder.WriteString(sma.AuthorSubname)
	builder.WriteString(", ")
	builder.WriteString("AuthorLink=")
	builder.WriteString(sma.AuthorLink)
	builder.WriteString(", ")
	builder.WriteString("AuthorIcon=")
	builder.WriteString(sma.AuthorIcon)
	builder.WriteString(", ")
	builder.WriteString("Title=")
	builder.WriteString(sma.Title)
	builder.WriteString(", ")
	builder.WriteString("TitleLink=")
	builder.WriteString(sma.TitleLink)
	builder.WriteString(", ")
	builder.WriteString("Pretext=")
	builder.WriteString(sma.Pretext)
	builder.WriteString(", ")
	builder.WriteString("Text=")
	builder.WriteString(sma.Text)
	builder.WriteString(", ")
	builder.WriteString("ImageURL=")
	builder.WriteString(sma.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("ThumbURL=")
	builder.WriteString(sma.ThumbURL)
	builder.WriteByte(')')
	return builder.String()
}

// SlackMessageAttachments is a parsable slice of SlackMessageAttachment.
type SlackMessageAttachments []*SlackMessageAttachment
