// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/echo-stream/database/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/echo-stream/database/ent/application"
	"github.com/echo-stream/database/ent/slackmessage"
	"github.com/echo-stream/database/ent/slackmessageattachment"
	"github.com/echo-stream/database/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Application is the client for interacting with the Application builders.
	Application *ApplicationClient
	// SlackMessage is the client for interacting with the SlackMessage builders.
	SlackMessage *SlackMessageClient
	// SlackMessageAttachment is the client for interacting with the SlackMessageAttachment builders.
	SlackMessageAttachment *SlackMessageAttachmentClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Application = NewApplicationClient(c.config)
	c.SlackMessage = NewSlackMessageClient(c.config)
	c.SlackMessageAttachment = NewSlackMessageAttachmentClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		Application:            NewApplicationClient(cfg),
		SlackMessage:           NewSlackMessageClient(cfg),
		SlackMessageAttachment: NewSlackMessageAttachmentClient(cfg),
		User:                   NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                    ctx,
		config:                 cfg,
		Application:            NewApplicationClient(cfg),
		SlackMessage:           NewSlackMessageClient(cfg),
		SlackMessageAttachment: NewSlackMessageAttachmentClient(cfg),
		User:                   NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Application.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Application.Use(hooks...)
	c.SlackMessage.Use(hooks...)
	c.SlackMessageAttachment.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Application.Intercept(interceptors...)
	c.SlackMessage.Intercept(interceptors...)
	c.SlackMessageAttachment.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApplicationMutation:
		return c.Application.mutate(ctx, m)
	case *SlackMessageMutation:
		return c.SlackMessage.mutate(ctx, m)
	case *SlackMessageAttachmentMutation:
		return c.SlackMessageAttachment.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ApplicationClient is a client for the Application schema.
type ApplicationClient struct {
	config
}

// NewApplicationClient returns a client for the Application from the given config.
func NewApplicationClient(c config) *ApplicationClient {
	return &ApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `application.Hooks(f(g(h())))`.
func (c *ApplicationClient) Use(hooks ...Hook) {
	c.hooks.Application = append(c.hooks.Application, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `application.Intercept(f(g(h())))`.
func (c *ApplicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Application = append(c.inters.Application, interceptors...)
}

// Create returns a builder for creating a Application entity.
func (c *ApplicationClient) Create() *ApplicationCreate {
	mutation := newApplicationMutation(c.config, OpCreate)
	return &ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Application entities.
func (c *ApplicationClient) CreateBulk(builders ...*ApplicationCreate) *ApplicationCreateBulk {
	return &ApplicationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApplicationClient) MapCreateBulk(slice any, setFunc func(*ApplicationCreate, int)) *ApplicationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApplicationCreateBulk{err: fmt.Errorf("calling to ApplicationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApplicationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Application.
func (c *ApplicationClient) Update() *ApplicationUpdate {
	mutation := newApplicationMutation(c.config, OpUpdate)
	return &ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationClient) UpdateOne(a *Application) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplication(a))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationClient) UpdateOneID(id int) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplicationID(id))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Application.
func (c *ApplicationClient) Delete() *ApplicationDelete {
	mutation := newApplicationMutation(c.config, OpDelete)
	return &ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationClient) DeleteOne(a *Application) *ApplicationDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationClient) DeleteOneID(id int) *ApplicationDeleteOne {
	builder := c.Delete().Where(application.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationDeleteOne{builder}
}

// Query returns a query builder for Application.
func (c *ApplicationClient) Query() *ApplicationQuery {
	return &ApplicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplication},
		inters: c.Interceptors(),
	}
}

// Get returns a Application entity by its id.
func (c *ApplicationClient) Get(ctx context.Context, id int) (*Application, error) {
	return c.Query().Where(application.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationClient) GetX(ctx context.Context, id int) *Application {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserID queries the user_id edge of a Application.
func (c *ApplicationClient) QueryUserID(a *Application) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, application.UserIDTable, application.UserIDColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicationClient) Hooks() []Hook {
	return c.hooks.Application
}

// Interceptors returns the client interceptors.
func (c *ApplicationClient) Interceptors() []Interceptor {
	return c.inters.Application
}

func (c *ApplicationClient) mutate(ctx context.Context, m *ApplicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Application mutation op: %q", m.Op())
	}
}

// SlackMessageClient is a client for the SlackMessage schema.
type SlackMessageClient struct {
	config
}

// NewSlackMessageClient returns a client for the SlackMessage from the given config.
func NewSlackMessageClient(c config) *SlackMessageClient {
	return &SlackMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `slackmessage.Hooks(f(g(h())))`.
func (c *SlackMessageClient) Use(hooks ...Hook) {
	c.hooks.SlackMessage = append(c.hooks.SlackMessage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `slackmessage.Intercept(f(g(h())))`.
func (c *SlackMessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.SlackMessage = append(c.inters.SlackMessage, interceptors...)
}

// Create returns a builder for creating a SlackMessage entity.
func (c *SlackMessageClient) Create() *SlackMessageCreate {
	mutation := newSlackMessageMutation(c.config, OpCreate)
	return &SlackMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SlackMessage entities.
func (c *SlackMessageClient) CreateBulk(builders ...*SlackMessageCreate) *SlackMessageCreateBulk {
	return &SlackMessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SlackMessageClient) MapCreateBulk(slice any, setFunc func(*SlackMessageCreate, int)) *SlackMessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SlackMessageCreateBulk{err: fmt.Errorf("calling to SlackMessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SlackMessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SlackMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SlackMessage.
func (c *SlackMessageClient) Update() *SlackMessageUpdate {
	mutation := newSlackMessageMutation(c.config, OpUpdate)
	return &SlackMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SlackMessageClient) UpdateOne(sm *SlackMessage) *SlackMessageUpdateOne {
	mutation := newSlackMessageMutation(c.config, OpUpdateOne, withSlackMessage(sm))
	return &SlackMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SlackMessageClient) UpdateOneID(id int) *SlackMessageUpdateOne {
	mutation := newSlackMessageMutation(c.config, OpUpdateOne, withSlackMessageID(id))
	return &SlackMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SlackMessage.
func (c *SlackMessageClient) Delete() *SlackMessageDelete {
	mutation := newSlackMessageMutation(c.config, OpDelete)
	return &SlackMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SlackMessageClient) DeleteOne(sm *SlackMessage) *SlackMessageDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SlackMessageClient) DeleteOneID(id int) *SlackMessageDeleteOne {
	builder := c.Delete().Where(slackmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SlackMessageDeleteOne{builder}
}

// Query returns a query builder for SlackMessage.
func (c *SlackMessageClient) Query() *SlackMessageQuery {
	return &SlackMessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSlackMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a SlackMessage entity by its id.
func (c *SlackMessageClient) Get(ctx context.Context, id int) (*SlackMessage, error) {
	return c.Query().Where(slackmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SlackMessageClient) GetX(ctx context.Context, id int) *SlackMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySlackMessageAttachments queries the slack_message_attachments edge of a SlackMessage.
func (c *SlackMessageClient) QuerySlackMessageAttachments(sm *SlackMessage) *SlackMessageAttachmentQuery {
	query := (&SlackMessageAttachmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(slackmessage.Table, slackmessage.FieldID, id),
			sqlgraph.To(slackmessageattachment.Table, slackmessageattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, slackmessage.SlackMessageAttachmentsTable, slackmessage.SlackMessageAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SlackMessageClient) Hooks() []Hook {
	return c.hooks.SlackMessage
}

// Interceptors returns the client interceptors.
func (c *SlackMessageClient) Interceptors() []Interceptor {
	return c.inters.SlackMessage
}

func (c *SlackMessageClient) mutate(ctx context.Context, m *SlackMessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SlackMessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SlackMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SlackMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SlackMessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SlackMessage mutation op: %q", m.Op())
	}
}

// SlackMessageAttachmentClient is a client for the SlackMessageAttachment schema.
type SlackMessageAttachmentClient struct {
	config
}

// NewSlackMessageAttachmentClient returns a client for the SlackMessageAttachment from the given config.
func NewSlackMessageAttachmentClient(c config) *SlackMessageAttachmentClient {
	return &SlackMessageAttachmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `slackmessageattachment.Hooks(f(g(h())))`.
func (c *SlackMessageAttachmentClient) Use(hooks ...Hook) {
	c.hooks.SlackMessageAttachment = append(c.hooks.SlackMessageAttachment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `slackmessageattachment.Intercept(f(g(h())))`.
func (c *SlackMessageAttachmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.SlackMessageAttachment = append(c.inters.SlackMessageAttachment, interceptors...)
}

// Create returns a builder for creating a SlackMessageAttachment entity.
func (c *SlackMessageAttachmentClient) Create() *SlackMessageAttachmentCreate {
	mutation := newSlackMessageAttachmentMutation(c.config, OpCreate)
	return &SlackMessageAttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SlackMessageAttachment entities.
func (c *SlackMessageAttachmentClient) CreateBulk(builders ...*SlackMessageAttachmentCreate) *SlackMessageAttachmentCreateBulk {
	return &SlackMessageAttachmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SlackMessageAttachmentClient) MapCreateBulk(slice any, setFunc func(*SlackMessageAttachmentCreate, int)) *SlackMessageAttachmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SlackMessageAttachmentCreateBulk{err: fmt.Errorf("calling to SlackMessageAttachmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SlackMessageAttachmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SlackMessageAttachmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SlackMessageAttachment.
func (c *SlackMessageAttachmentClient) Update() *SlackMessageAttachmentUpdate {
	mutation := newSlackMessageAttachmentMutation(c.config, OpUpdate)
	return &SlackMessageAttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SlackMessageAttachmentClient) UpdateOne(sma *SlackMessageAttachment) *SlackMessageAttachmentUpdateOne {
	mutation := newSlackMessageAttachmentMutation(c.config, OpUpdateOne, withSlackMessageAttachment(sma))
	return &SlackMessageAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SlackMessageAttachmentClient) UpdateOneID(id int) *SlackMessageAttachmentUpdateOne {
	mutation := newSlackMessageAttachmentMutation(c.config, OpUpdateOne, withSlackMessageAttachmentID(id))
	return &SlackMessageAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SlackMessageAttachment.
func (c *SlackMessageAttachmentClient) Delete() *SlackMessageAttachmentDelete {
	mutation := newSlackMessageAttachmentMutation(c.config, OpDelete)
	return &SlackMessageAttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SlackMessageAttachmentClient) DeleteOne(sma *SlackMessageAttachment) *SlackMessageAttachmentDeleteOne {
	return c.DeleteOneID(sma.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SlackMessageAttachmentClient) DeleteOneID(id int) *SlackMessageAttachmentDeleteOne {
	builder := c.Delete().Where(slackmessageattachment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SlackMessageAttachmentDeleteOne{builder}
}

// Query returns a query builder for SlackMessageAttachment.
func (c *SlackMessageAttachmentClient) Query() *SlackMessageAttachmentQuery {
	return &SlackMessageAttachmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSlackMessageAttachment},
		inters: c.Interceptors(),
	}
}

// Get returns a SlackMessageAttachment entity by its id.
func (c *SlackMessageAttachmentClient) Get(ctx context.Context, id int) (*SlackMessageAttachment, error) {
	return c.Query().Where(slackmessageattachment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SlackMessageAttachmentClient) GetX(ctx context.Context, id int) *SlackMessageAttachment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMessageID queries the message_id edge of a SlackMessageAttachment.
func (c *SlackMessageAttachmentClient) QueryMessageID(sma *SlackMessageAttachment) *SlackMessageQuery {
	query := (&SlackMessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sma.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(slackmessageattachment.Table, slackmessageattachment.FieldID, id),
			sqlgraph.To(slackmessage.Table, slackmessage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, slackmessageattachment.MessageIDTable, slackmessageattachment.MessageIDColumn),
		)
		fromV = sqlgraph.Neighbors(sma.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SlackMessageAttachmentClient) Hooks() []Hook {
	return c.hooks.SlackMessageAttachment
}

// Interceptors returns the client interceptors.
func (c *SlackMessageAttachmentClient) Interceptors() []Interceptor {
	return c.inters.SlackMessageAttachment
}

func (c *SlackMessageAttachmentClient) mutate(ctx context.Context, m *SlackMessageAttachmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SlackMessageAttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SlackMessageAttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SlackMessageAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SlackMessageAttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SlackMessageAttachment mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplications queries the applications edge of a User.
func (c *UserClient) QueryApplications(u *User) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ApplicationsTable, user.ApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Application, SlackMessage, SlackMessageAttachment, User []ent.Hook
	}
	inters struct {
		Application, SlackMessage, SlackMessageAttachment, User []ent.Interceptor
	}
)
