// Code generated by ent, DO NOT EDIT.

package slackmessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/echo-stream/database/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLTE(FieldID, id))
}

// ApplicationId applies equality check predicate on the "ApplicationId" field. It's identical to ApplicationIdEQ.
func ApplicationId(v uuid.UUID) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldApplicationId, v))
}

// UserName applies equality check predicate on the "UserName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldUserName, v))
}

// IconEmoji applies equality check predicate on the "IconEmoji" field. It's identical to IconEmojiEQ.
func IconEmoji(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldIconEmoji, v))
}

// Channel applies equality check predicate on the "Channel" field. It's identical to ChannelEQ.
func Channel(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldChannel, v))
}

// Text applies equality check predicate on the "Text" field. It's identical to TextEQ.
func Text(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldText, v))
}

// ThreadTs applies equality check predicate on the "ThreadTs" field. It's identical to ThreadTsEQ.
func ThreadTs(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldThreadTs, v))
}

// State applies equality check predicate on the "State" field. It's identical to StateEQ.
func State(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldState, v))
}

// RetryCount applies equality check predicate on the "RetryCount" field. It's identical to RetryCountEQ.
func RetryCount(v int16) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldRetryCount, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldUpdatedAt, v))
}

// ApplicationIdEQ applies the EQ predicate on the "ApplicationId" field.
func ApplicationIdEQ(v uuid.UUID) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldApplicationId, v))
}

// ApplicationIdNEQ applies the NEQ predicate on the "ApplicationId" field.
func ApplicationIdNEQ(v uuid.UUID) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNEQ(FieldApplicationId, v))
}

// ApplicationIdIn applies the In predicate on the "ApplicationId" field.
func ApplicationIdIn(vs ...uuid.UUID) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIn(FieldApplicationId, vs...))
}

// ApplicationIdNotIn applies the NotIn predicate on the "ApplicationId" field.
func ApplicationIdNotIn(vs ...uuid.UUID) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotIn(FieldApplicationId, vs...))
}

// ApplicationIdGT applies the GT predicate on the "ApplicationId" field.
func ApplicationIdGT(v uuid.UUID) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGT(FieldApplicationId, v))
}

// ApplicationIdGTE applies the GTE predicate on the "ApplicationId" field.
func ApplicationIdGTE(v uuid.UUID) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGTE(FieldApplicationId, v))
}

// ApplicationIdLT applies the LT predicate on the "ApplicationId" field.
func ApplicationIdLT(v uuid.UUID) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLT(FieldApplicationId, v))
}

// ApplicationIdLTE applies the LTE predicate on the "ApplicationId" field.
func ApplicationIdLTE(v uuid.UUID) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLTE(FieldApplicationId, v))
}

// UserNameEQ applies the EQ predicate on the "UserName" field.
func UserNameEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "UserName" field.
func UserNameNEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "UserName" field.
func UserNameIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "UserName" field.
func UserNameNotIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "UserName" field.
func UserNameGT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "UserName" field.
func UserNameGTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "UserName" field.
func UserNameLT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "UserName" field.
func UserNameLTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "UserName" field.
func UserNameContains(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "UserName" field.
func UserNameHasPrefix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "UserName" field.
func UserNameHasSuffix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameIsNil applies the IsNil predicate on the "UserName" field.
func UserNameIsNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIsNull(FieldUserName))
}

// UserNameNotNil applies the NotNil predicate on the "UserName" field.
func UserNameNotNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotNull(FieldUserName))
}

// UserNameEqualFold applies the EqualFold predicate on the "UserName" field.
func UserNameEqualFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "UserName" field.
func UserNameContainsFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContainsFold(FieldUserName, v))
}

// IconEmojiEQ applies the EQ predicate on the "IconEmoji" field.
func IconEmojiEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldIconEmoji, v))
}

// IconEmojiNEQ applies the NEQ predicate on the "IconEmoji" field.
func IconEmojiNEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNEQ(FieldIconEmoji, v))
}

// IconEmojiIn applies the In predicate on the "IconEmoji" field.
func IconEmojiIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIn(FieldIconEmoji, vs...))
}

// IconEmojiNotIn applies the NotIn predicate on the "IconEmoji" field.
func IconEmojiNotIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotIn(FieldIconEmoji, vs...))
}

// IconEmojiGT applies the GT predicate on the "IconEmoji" field.
func IconEmojiGT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGT(FieldIconEmoji, v))
}

// IconEmojiGTE applies the GTE predicate on the "IconEmoji" field.
func IconEmojiGTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGTE(FieldIconEmoji, v))
}

// IconEmojiLT applies the LT predicate on the "IconEmoji" field.
func IconEmojiLT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLT(FieldIconEmoji, v))
}

// IconEmojiLTE applies the LTE predicate on the "IconEmoji" field.
func IconEmojiLTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLTE(FieldIconEmoji, v))
}

// IconEmojiContains applies the Contains predicate on the "IconEmoji" field.
func IconEmojiContains(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContains(FieldIconEmoji, v))
}

// IconEmojiHasPrefix applies the HasPrefix predicate on the "IconEmoji" field.
func IconEmojiHasPrefix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasPrefix(FieldIconEmoji, v))
}

// IconEmojiHasSuffix applies the HasSuffix predicate on the "IconEmoji" field.
func IconEmojiHasSuffix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasSuffix(FieldIconEmoji, v))
}

// IconEmojiIsNil applies the IsNil predicate on the "IconEmoji" field.
func IconEmojiIsNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIsNull(FieldIconEmoji))
}

// IconEmojiNotNil applies the NotNil predicate on the "IconEmoji" field.
func IconEmojiNotNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotNull(FieldIconEmoji))
}

// IconEmojiEqualFold applies the EqualFold predicate on the "IconEmoji" field.
func IconEmojiEqualFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEqualFold(FieldIconEmoji, v))
}

// IconEmojiContainsFold applies the ContainsFold predicate on the "IconEmoji" field.
func IconEmojiContainsFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContainsFold(FieldIconEmoji, v))
}

// ChannelEQ applies the EQ predicate on the "Channel" field.
func ChannelEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldChannel, v))
}

// ChannelNEQ applies the NEQ predicate on the "Channel" field.
func ChannelNEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNEQ(FieldChannel, v))
}

// ChannelIn applies the In predicate on the "Channel" field.
func ChannelIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIn(FieldChannel, vs...))
}

// ChannelNotIn applies the NotIn predicate on the "Channel" field.
func ChannelNotIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotIn(FieldChannel, vs...))
}

// ChannelGT applies the GT predicate on the "Channel" field.
func ChannelGT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGT(FieldChannel, v))
}

// ChannelGTE applies the GTE predicate on the "Channel" field.
func ChannelGTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGTE(FieldChannel, v))
}

// ChannelLT applies the LT predicate on the "Channel" field.
func ChannelLT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLT(FieldChannel, v))
}

// ChannelLTE applies the LTE predicate on the "Channel" field.
func ChannelLTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLTE(FieldChannel, v))
}

// ChannelContains applies the Contains predicate on the "Channel" field.
func ChannelContains(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContains(FieldChannel, v))
}

// ChannelHasPrefix applies the HasPrefix predicate on the "Channel" field.
func ChannelHasPrefix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasPrefix(FieldChannel, v))
}

// ChannelHasSuffix applies the HasSuffix predicate on the "Channel" field.
func ChannelHasSuffix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasSuffix(FieldChannel, v))
}

// ChannelEqualFold applies the EqualFold predicate on the "Channel" field.
func ChannelEqualFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEqualFold(FieldChannel, v))
}

// ChannelContainsFold applies the ContainsFold predicate on the "Channel" field.
func ChannelContainsFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContainsFold(FieldChannel, v))
}

// TextEQ applies the EQ predicate on the "Text" field.
func TextEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "Text" field.
func TextNEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "Text" field.
func TextIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "Text" field.
func TextNotIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "Text" field.
func TextGT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "Text" field.
func TextGTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "Text" field.
func TextLT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "Text" field.
func TextLTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "Text" field.
func TextContains(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "Text" field.
func TextHasPrefix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "Text" field.
func TextHasSuffix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasSuffix(FieldText, v))
}

// TextIsNil applies the IsNil predicate on the "Text" field.
func TextIsNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIsNull(FieldText))
}

// TextNotNil applies the NotNil predicate on the "Text" field.
func TextNotNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotNull(FieldText))
}

// TextEqualFold applies the EqualFold predicate on the "Text" field.
func TextEqualFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "Text" field.
func TextContainsFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContainsFold(FieldText, v))
}

// ThreadTsEQ applies the EQ predicate on the "ThreadTs" field.
func ThreadTsEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldThreadTs, v))
}

// ThreadTsNEQ applies the NEQ predicate on the "ThreadTs" field.
func ThreadTsNEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNEQ(FieldThreadTs, v))
}

// ThreadTsIn applies the In predicate on the "ThreadTs" field.
func ThreadTsIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIn(FieldThreadTs, vs...))
}

// ThreadTsNotIn applies the NotIn predicate on the "ThreadTs" field.
func ThreadTsNotIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotIn(FieldThreadTs, vs...))
}

// ThreadTsGT applies the GT predicate on the "ThreadTs" field.
func ThreadTsGT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGT(FieldThreadTs, v))
}

// ThreadTsGTE applies the GTE predicate on the "ThreadTs" field.
func ThreadTsGTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGTE(FieldThreadTs, v))
}

// ThreadTsLT applies the LT predicate on the "ThreadTs" field.
func ThreadTsLT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLT(FieldThreadTs, v))
}

// ThreadTsLTE applies the LTE predicate on the "ThreadTs" field.
func ThreadTsLTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLTE(FieldThreadTs, v))
}

// ThreadTsContains applies the Contains predicate on the "ThreadTs" field.
func ThreadTsContains(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContains(FieldThreadTs, v))
}

// ThreadTsHasPrefix applies the HasPrefix predicate on the "ThreadTs" field.
func ThreadTsHasPrefix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasPrefix(FieldThreadTs, v))
}

// ThreadTsHasSuffix applies the HasSuffix predicate on the "ThreadTs" field.
func ThreadTsHasSuffix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasSuffix(FieldThreadTs, v))
}

// ThreadTsIsNil applies the IsNil predicate on the "ThreadTs" field.
func ThreadTsIsNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIsNull(FieldThreadTs))
}

// ThreadTsNotNil applies the NotNil predicate on the "ThreadTs" field.
func ThreadTsNotNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotNull(FieldThreadTs))
}

// ThreadTsEqualFold applies the EqualFold predicate on the "ThreadTs" field.
func ThreadTsEqualFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEqualFold(FieldThreadTs, v))
}

// ThreadTsContainsFold applies the ContainsFold predicate on the "ThreadTs" field.
func ThreadTsContainsFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContainsFold(FieldThreadTs, v))
}

// StateEQ applies the EQ predicate on the "State" field.
func StateEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "State" field.
func StateNEQ(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "State" field.
func StateIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "State" field.
func StateNotIn(vs ...string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "State" field.
func StateGT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "State" field.
func StateGTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "State" field.
func StateLT(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "State" field.
func StateLTE(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "State" field.
func StateContains(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "State" field.
func StateHasPrefix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "State" field.
func StateHasSuffix(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "State" field.
func StateIsNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "State" field.
func StateNotNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "State" field.
func StateEqualFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "State" field.
func StateContainsFold(v string) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldContainsFold(FieldState, v))
}

// RetryCountEQ applies the EQ predicate on the "RetryCount" field.
func RetryCountEQ(v int16) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "RetryCount" field.
func RetryCountNEQ(v int16) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "RetryCount" field.
func RetryCountIn(vs ...int16) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "RetryCount" field.
func RetryCountNotIn(vs ...int16) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "RetryCount" field.
func RetryCountGT(v int16) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "RetryCount" field.
func RetryCountGTE(v int16) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "RetryCount" field.
func RetryCountLT(v int16) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "RetryCount" field.
func RetryCountLTE(v int16) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLTE(FieldRetryCount, v))
}

// RetryCountIsNil applies the IsNil predicate on the "RetryCount" field.
func RetryCountIsNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIsNull(FieldRetryCount))
}

// RetryCountNotNil applies the NotNil predicate on the "RetryCount" field.
func RetryCountNotNil() predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotNull(FieldRetryCount))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.SlackMessage {
	return predicate.SlackMessage(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasSlackMessageAttachments applies the HasEdge predicate on the "slack_message_attachments" edge.
func HasSlackMessageAttachments() predicate.SlackMessage {
	return predicate.SlackMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SlackMessageAttachmentsTable, SlackMessageAttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSlackMessageAttachmentsWith applies the HasEdge predicate on the "slack_message_attachments" edge with a given conditions (other predicates).
func HasSlackMessageAttachmentsWith(preds ...predicate.SlackMessageAttachment) predicate.SlackMessage {
	return predicate.SlackMessage(func(s *sql.Selector) {
		step := newSlackMessageAttachmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SlackMessage) predicate.SlackMessage {
	return predicate.SlackMessage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SlackMessage) predicate.SlackMessage {
	return predicate.SlackMessage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SlackMessage) predicate.SlackMessage {
	return predicate.SlackMessage(sql.NotPredicates(p))
}
