// Code generated by ent, DO NOT EDIT.

package slackmessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the slackmessage type in the database.
	Label = "slack_message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldApplicationId holds the string denoting the applicationid field in the database.
	FieldApplicationId = "application_id"
	// FieldUserName holds the string denoting the username field in the database.
	FieldUserName = "user_name"
	// FieldIconEmoji holds the string denoting the iconemoji field in the database.
	FieldIconEmoji = "icon_emoji"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldThreadTs holds the string denoting the threadts field in the database.
	FieldThreadTs = "thread_ts"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldRetryCount holds the string denoting the retrycount field in the database.
	FieldRetryCount = "retry_count"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSlackMessageAttachments holds the string denoting the slack_message_attachments edge name in mutations.
	EdgeSlackMessageAttachments = "slack_message_attachments"
	// Table holds the table name of the slackmessage in the database.
	Table = "slack_messages"
	// SlackMessageAttachmentsTable is the table that holds the slack_message_attachments relation/edge.
	SlackMessageAttachmentsTable = "slack_message_attachments"
	// SlackMessageAttachmentsInverseTable is the table name for the SlackMessageAttachment entity.
	// It exists in this package in order to avoid circular dependency with the "slackmessageattachment" package.
	SlackMessageAttachmentsInverseTable = "slack_message_attachments"
	// SlackMessageAttachmentsColumn is the table column denoting the slack_message_attachments relation/edge.
	SlackMessageAttachmentsColumn = "message_id"
)

// Columns holds all SQL columns for slackmessage fields.
var Columns = []string{
	FieldID,
	FieldApplicationId,
	FieldUserName,
	FieldIconEmoji,
	FieldChannel,
	FieldText,
	FieldThreadTs,
	FieldState,
	FieldRetryCount,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ChannelValidator is a validator for the "Channel" field. It is called by the builders before save.
	ChannelValidator func(string) error
	// DefaultState holds the default value on creation for the "State" field.
	DefaultState string
	// DefaultRetryCount holds the default value on creation for the "RetryCount" field.
	DefaultRetryCount int16
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the SlackMessage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByApplicationId orders the results by the ApplicationId field.
func ByApplicationId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationId, opts...).ToFunc()
}

// ByUserName orders the results by the UserName field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByIconEmoji orders the results by the IconEmoji field.
func ByIconEmoji(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIconEmoji, opts...).ToFunc()
}

// ByChannel orders the results by the Channel field.
func ByChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannel, opts...).ToFunc()
}

// ByText orders the results by the Text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByThreadTs orders the results by the ThreadTs field.
func ByThreadTs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThreadTs, opts...).ToFunc()
}

// ByState orders the results by the State field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByRetryCount orders the results by the RetryCount field.
func ByRetryCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetryCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySlackMessageAttachmentsCount orders the results by slack_message_attachments count.
func BySlackMessageAttachmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSlackMessageAttachmentsStep(), opts...)
	}
}

// BySlackMessageAttachments orders the results by slack_message_attachments terms.
func BySlackMessageAttachments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSlackMessageAttachmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSlackMessageAttachmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SlackMessageAttachmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SlackMessageAttachmentsTable, SlackMessageAttachmentsColumn),
	)
}
